<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>资本预算决策方法</title>
      <link href="/2018/08/03/capital-budgeting-decision-method/"/>
      <url>/2018/08/03/capital-budgeting-decision-method/</url>
      <content type="html"><![CDATA[<p>​    <a id="more"></a></p><h2 id="前文回顾"><a href="#前文回顾" class="headerlink" title="前文回顾"></a>前文回顾</h2><p>资本预算考虑：  </p><ul><li>增量现金流</li><li>税后现金流</li></ul><p>资本预算不考虑：</p><ul><li>沉没成本</li><li>融资成本  </li></ul><p>现金流分3种：</p><ul><li>初始投资IO</li><li>年度税后现金流ATCF</li><li>剩余现金流TCF  </li></ul><p>在我们确定了3种现金流的金额之后，就可以来决策了。  </p><h2 id="决策方法"><a href="#决策方法" class="headerlink" title="决策方法"></a>决策方法</h2><p>首先考虑这样一个现金流，作为例子：  </p><p><img src="http://pah1qyen2.bkt.clouddn.com/blog/180802/dK88Hdd4IC.png?imageslim" alt="mark"></p><ul><li>期初投入62680元</li><li>从第一年开始，每年获得24248元的增量现金流</li><li>第5年有18000元的剩余现金流</li></ul><h3 id="投资回收期法-Payback-Period"><a href="#投资回收期法-Payback-Period" class="headerlink" title="投资回收期法(Payback Period)"></a>投资回收期法(Payback Period)</h3><p>这个方法的思路很简单，我投入了62680元，每年回收24248元，我需要多少年才能收回成本？初中数学了解一下，直接用<code>62680/24248=2.58</code>。  </p><p>也就是说，我需要用2.58年收回成本，如果公司期望3年收回成本，那么2.58年也是可以接受的。  </p><p>看似很有道理哦，也很好实现，但投资回收期法有几个问题：  </p><ul><li>忽略了现金流的时间价值</li><li>忽略了未来可能的现金流流出。万一这个项目第4年又流出了40000美金，按照回收期法，结果依旧是2.58年，项目依旧可以接受。  </li></ul><h3 id="折现回收期法-Discounted-Payback-Period"><a href="#折现回收期法-Discounted-Payback-Period" class="headerlink" title="折现回收期法(Discounted Payback Period)"></a>折现回收期法(Discounted Payback Period)</h3><p>相对于普通的回收期法，折现回收期考虑了现金流的时间价值。<br>于是我们把从第一年到第5年的现金流依次折现，然后与初始投资相加，一直到现值大于零为止，得到一个年数，就是折现后的回收期。  </p><p>使用折现回收期法，计算出的回收期为&gt;3年。因此，如果公司要求3年回收IO的话，从数字上来看这个项目是不能接受的。  </p><p><img src="http://pah1qyen2.bkt.clouddn.com/blog/180802/HlbB1FI744.png?imageslim" alt="mark"></p><p>虽然折现回收期考虑了货币的时间价值，但是，并不是所有项目周期内产生的现金流都被列入计算。如果想改进这一点，就得使用下面的净现值法。</p><h3 id="净现值法-NPV"><a href="#净现值法-NPV" class="headerlink" title="净现值法(NPV)"></a>净现值法(NPV)</h3><p>前面的折旧回收期，虽然考虑了现值，但他只考虑了能够补偿初始现金流的现值部分，后面的并未考虑。<br>如果考虑全部现金流，他的现值(折算到第0年)为：  </p><p><img src="http://pah1qyen2.bkt.clouddn.com/blog/180802/kDCijGiAcg.png?imageslim" alt="mark"></p><p>然后把这个现值减去初始投资，就得到了整个项目的净现值：  </p><p><img src="http://pah1qyen2.bkt.clouddn.com/blog/180802/165dKK8h5d.png?imageslim" alt="mark"></p><p>也就是说，得到了整个项目的终值，折合到今天的价值。如果这个NPV为正数，就可以接受，如果为负数，就不能接受。  </p><p>Excel提供了NPV公式，来计算一组现金流的净现值：  </p><p><img src="http://pah1qyen2.bkt.clouddn.com/blog/180802/GDlIa6aBc4.png?imageslim" alt="mark"></p><blockquote><p>在使用NPV函数的时候，如果直接把IO也作为现金流包含在NPV函数里，例如<code>NPV(B9,B2:B7)</code>，那么得到的是第-1年的NPV，并不是真正第0年的NPV。这个时候，需要用(1+hurdle rate)来校正。</p></blockquote><p>从理论上来讲，NPV法是资本预算中最科学的一种方法。  </p><h3 id="盈利能力指数-Profitablity-Index"><a href="#盈利能力指数-Profitablity-Index" class="headerlink" title="盈利能力指数(Profitablity Index)"></a>盈利能力指数(Profitablity Index)</h3><p>NPV给出了净现值的绝对值，不过，这可能忽略项目规模。如果一个初始投资为1000的NPV为10，和一个初始投资为100，NPV为8的项目比较，从NPV的绝对值上来看，似乎第一个项目更好，但实际上，第二个项目的收益率要更高。从这点来讲，这个与销售额和利润的关系类似。  </p><p>于是，我们引入了盈利指数这个概念。</p><p>简单的讲，盈利指数就等于项目回收的现金流，除以初始投资：  </p><p><img src="http://pah1qyen2.bkt.clouddn.com/blog/180802/KfFbBfIGCb.png?imageslim" alt="mark"></p><p>或者，  </p><p><code>PI=NPV/IO+1</code>  </p><p>很显然，如果NPV大于零，PI就大于1，项目就可以被接受。  </p><h3 id="内部收益率-IRR-MIRR"><a href="#内部收益率-IRR-MIRR" class="headerlink" title="内部收益率(IRR/MIRR)"></a>内部收益率(IRR/MIRR)</h3><p>还是从NPV的角度上考虑，如果NPV为0，代表项目处在可以与不可以接受的临界点，这个时候，可以计算出一个折现率，这个折现率就被称为内部收益率。  </p><p>如果计算出来的内部收益率大于要求收益率，就代表项目可以被接受。  </p><p>内部收益率可以通过下面公式来计算：  </p><p><img src="http://pah1qyen2.bkt.clouddn.com/blog/180802/121176ecmK.png?imageslim" alt="mark"></p><p>鉴于这是一个多次方程，没有什么快速方法来求解，只能逐个试错。Excel提供了IRR函数，来计算内部收益率。<br>IRR虽然非常常用，但也是存在一定问题的：  </p><ul><li>方程不一定有唯一解。如果一个项目有多个现金流流出，那么就会有多个IRR</li><li>内部收益率法默认现金流以IRR继续投资，但IRR并不一定能反应真实的再投资收益。Excel有一个内置函数MIRR，可以对IRR进行再投资收益率的校正。  </li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>确定了现金流和决策方法之后，就可以对资本预算进行下一步，也就是敏感度分析和优化了。敏感度分析涉及不同hurdle rate下的净现值，优化涉及到规划求解，在这里就不详细探讨了。  </p>]]></content>
      
      <categories>
          
          <category> 金融 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 财务分析 </tag>
            
            <tag> 资本预算 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>资本预算</title>
      <link href="/2018/07/31/capital-budgeting/"/>
      <url>/2018/07/31/capital-budgeting/</url>
      <content type="html"><![CDATA[<p>​     </p><a id="more"></a><h2 id="什么是资本预算"><a href="#什么是资本预算" class="headerlink" title="什么是资本预算"></a>什么是资本预算</h2><p>在企业报表的部分我们说过，企业主要是在做经营，投资和筹资三件事情。筹资，和我们资本成本有很大关系。既然筹到了资，那么一定需要把资产投出去，让他变成更多的资本。  </p><p>在企业投资的时候，当然要事先考量投资的收益以及自己的成本。只有在收益大于投资的时候，企业才有动力去投资。  </p><p>资本预算就是主要服务与此。简单点讲，资本预算就是企业确定投资预期收益，并决策是否到底要投资的一种方法。  </p><h2 id="如何进行资本预算"><a href="#如何进行资本预算" class="headerlink" title="如何进行资本预算"></a>如何进行资本预算</h2><p>在资本预算的过程中，公司最关注的还是投资的项目是否能够产生现金流入。从股东的层面上来讲，只有账面有现金，才能有钱分红。一般来说，单个项目的资本预算可以这样来做：  </p><ol><li>确定现金流</li><li>根据现金流进行决策  </li></ol><h2 id="确定现金流"><a href="#确定现金流" class="headerlink" title="确定现金流"></a>确定现金流</h2><p>资本预算里对其所关心的现金流有这么几个要求：  </p><ul><li>增量现金流<br>如果新项目和老项目的产品存在相互替代，那么资本预算只考虑多出来的那部分现金流。  </li><li>税后现金流<br>毕竟，所需要交的税是不属于公司的，公司只考虑税后现金流。  </li></ul><p>对于现金流，还有几点：  </p><ul><li><p>不考虑沉没成本<br>对于一笔钱来说，不管新项目上还是不上，都必须要花的话，那么他就是沉没成本。资本预算是不予以考虑的。  </p></li><li><p>不考虑融资成本<br>这个也不难理解，资本预算是先考虑收益，然后再对比成本。<br>融资成本实在资本成本那里计算的，并不在资本预算的现金流范围之内。  </p></li></ul><h3 id="现金流分类"><a href="#现金流分类" class="headerlink" title="现金流分类"></a>现金流分类</h3><p>对于一个项目来说，现金流按照项目的推进一般分三类：  </p><h4 id="初始投资-IO"><a href="#初始投资-IO" class="headerlink" title="初始投资(IO)"></a>初始投资(IO)</h4><p>Initial Outlay，表示公司在项目初期需要投入的现金流。这个现金流主要包括以下几个部分：  </p><ol><li>项目的价格（例如设备费用）</li><li>运输费，安装费，培训费</li></ol><p>以上两个项目需要都计入折旧基础，也就是说，折旧其实不仅仅只包括固定资产自身的价格，也包括与固定资产相关联的附加费用。  </p><ol start="3"><li>原有设备的残值</li></ol><p>上了新的项目，旧的机器还是有残值的。因此，残值相当于是现金流的流入。不过，如果机器的残值和账面价值不同，那么就会附带有税收影响。  </p><p>例如，一台机器原价100万，预期使用10年。用线性折旧5年之后，以60万的价格卖出，税率是25%。<br>对于这种情况，使用5年后，机器的账面价格为50万，而以60万售出，税前现金流增加了10万，而这10万需要付25%的税，因此，税后的现金流增加值为<code>10*（1-0.25）= 7.5</code>万  </p><ol start="4"><li>营运资本的变动<br> 如果新项目投入后，需要增加净营运资本，那么营运资本的增加值也应当被计入初始投资里。  </li></ol><p>综上所述，初始投资IO的计算公式为：  </p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">初始投资 = </span><br><span class="line">项目价格</span><br><span class="line"><span class="addition">+相关费用(运输，安装，培训)</span></span><br><span class="line"><span class="deletion">-残值</span></span><br><span class="line"><span class="addition">+处理残值带来的税费</span></span><br><span class="line"><span class="addition">+净营运资本的增加</span></span><br></pre></td></tr></table></figure><h4 id="年度税后现金流-ATCF"><a href="#年度税后现金流-ATCF" class="headerlink" title="年度税后现金流(ATCF)"></a>年度税后现金流(ATCF)</h4><p>ATCF考察的是项目在运转后，每年的现金流回报。ATCF一般包括几个现金流组成部分：  </p><ol><li><p>收入增加<br>  这个并不难理解，注意这个收入增加是净增加额</p></li><li><p>成本节约<br>  如果上一个项目，能让以后少花钱，也是可以考虑的。</p></li><li><p>附加费用<br>  如果投入了新的项目导致人工维修等费用增加的话，这部分费用需要在现金流中扣除。  </p><p>  不难看出，上面这3个部分都属于税前现金流的增加。需要扣除税率，来得到税后现金流。  </p></li><li><p>净营运资本变化<br>  和初始投资IO一样，每年净运营资本可能因为很多原因发生变化，最典型的就是通货膨胀了。所以，也需要把经运营资本的变化也考虑在内。   </p><p>  净运营资本的增加使用的是税后的现金流，因此不需要用税率进行调整。  </p></li><li><p>折旧收益<br>  折旧收益是很容易被忽视的一项影响现金流的项目。因为折旧是非现金费用，是税前扣除的，因此也具有税盾的作用。<br>  那么这个税盾的值是多少呢？  </p><p>  就直接用新项目每年的折旧相对于旧项目每年折旧费用的增加量，乘上税率就可以。  </p></li></ol><pre><code>综合上面5点，我们可以计算出税后的年度税后现金流为： ![mark](http://pah1qyen2.bkt.clouddn.com/blog/180802/iAEggKGLCA.png?imageslim)然后再把`-Dn(1-t)+Dn`合并一下，就变成了：</code></pre><p>综合上面5点，我们可以计算出税后的年度税后现金流为：  </p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">年度税后现金流=  </span><br><span class="line"></span><br><span class="line">(附加收入</span><br><span class="line"><span class="addition">+成本节约</span></span><br><span class="line"><span class="deletion">-附加费用)*(1-税率)</span></span><br><span class="line"><span class="deletion">-净营运资本的增加</span></span><br><span class="line"><span class="addition">+折旧费用增加*税率</span></span><br></pre></td></tr></table></figure><h4 id="剩余现金流-TCF"><a href="#剩余现金流-TCF" class="headerlink" title="剩余现金流(TCF)"></a>剩余现金流(TCF)</h4><p>在项目末期所产生的现金流。一般包括停产，回收净营运资本，处理残值等等。  </p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">剩余现金流=  </span><br><span class="line">净营运资本变化的回收</span><br><span class="line"><span class="addition">+残值</span></span><br><span class="line"><span class="deletion">-(残值-账面价值)*税率</span></span><br><span class="line"><span class="deletion">-停产成本*(1-税率)</span></span><br></pre></td></tr></table></figure><p>确定了每个阶段的现金流之后，我们就可以进行下一步决策了。  </p>]]></content>
      
      <categories>
          
          <category> 金融 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 财务分析 </tag>
            
            <tag> 资本预算 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>资本成本脑图</title>
      <link href="/2018/07/29/cost-of-capital-mindmap/"/>
      <url>/2018/07/29/cost-of-capital-mindmap/</url>
      <content type="html"><![CDATA[<p>​    </p><a id="more"></a>   <p><img src="http://pah1qyen2.bkt.clouddn.com/blog/180729/EIe5cbaGia.png?imageslim" alt="mark"></p>]]></content>
      
      <categories>
          
          <category> 金融 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 财务分析 </tag>
            
            <tag> 资本成本 </tag>
            
            <tag> 脑图 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>计算加权平均资本成本</title>
      <link href="/2018/07/29/wacc/"/>
      <url>/2018/07/29/wacc/</url>
      <content type="html"><![CDATA[<p>​    <a id="more"></a></p><h2 id="前文回顾"><a href="#前文回顾" class="headerlink" title="前文回顾"></a>前文回顾</h2><p>前面我们花相当的篇幅研究了个别资本成本，也就是长期借款，债券，普通股和优先股的资本成本。  </p><p>有了个别资本成本之后，我们当然不能简单的把资本成本加起来求算术平均，不然就会得到类似于郭敬明和姚明的平均身高为一米八的滑稽结果。  </p><p>试想这样一种情况，你今年正在进行理财，余额宝投入10万，年化收益3%，银行理财投20万，年化收益为5%， P2P投入10万，年化收益为10%。<br>问：一年下来总的年化收益为多少？  </p><p>我相信大家都不会简单的把3个年化收益相加求平均，得到6%的答案。因为，每个理财的投放额的权重是不一样的，对最终年化收益的贡献也不同。  </p><p>对于资本成本也是一样，若要求真正的资本成本，我们得先知道，每一项资本的权重是多少。  </p><h2 id="权重的确定"><a href="#权重的确定" class="headerlink" title="权重的确定"></a>权重的确定</h2><p>确定每一项资本的权重，一般有3种方法  </p><h3 id="账面价值权重"><a href="#账面价值权重" class="headerlink" title="账面价值权重"></a>账面价值权重</h3><p>反映的是每一项资本在入账时，记录的资本价值。<br>例如，如果发行了1万股的普通股，每股发行价为10元，那么普通股账面价值就是10万元。  </p><p>那么问题来了，像普通股这种东西是可以交易的，会有一个市场公允价格，如果后面股价从10元涨到了20元，那么很明显，普通股的资本成本在实际的资本中所占的比例要高了。  </p><p>因此，账面价值权重只是反映了一个历史权重。  </p><h3 id="市场价值权重"><a href="#市场价值权重" class="headerlink" title="市场价值权重"></a>市场价值权重</h3><p>如上面所说，市场价值权重可以反映市场运行当中公司真正的资本成本。  </p><p>市场价值权重需要先把各项资本按照市场价值来进行计算，然后得到相应的权重比例。  </p><h3 id="目标资本结构权重"><a href="#目标资本结构权重" class="headerlink" title="目标资本结构权重"></a>目标资本结构权重</h3><p>公司在经营的时候，很有可能已经事先根据市场测算出了一个最优的权重，使得资本成本得到最优解。随着市场的进行，管理层很有可能会朝着这个方向努力，达到最优的资本权重。  </p><p>因此，也可以根据目标资本权重来确定各项资本的权重。  </p><h2 id="WACC"><a href="#WACC" class="headerlink" title="WACC"></a>WACC</h2><p>有了个别资本成本，以及对应的权重之后，我们就可以计算加权平均资本成本了。计算公式很简单：  </p><p><img src="http://pah1qyen2.bkt.clouddn.com/blog/180729/J6AfFiKbHB.png?imageslim" alt="mark"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，不考虑发行成本的资本成本的计算就可以计算出来了。  </p><p>后期还可以再深入的内容有：  </p><ul><li>考虑发行成本</li><li>考虑边际资本成本（阶梯函数）</li></ul>]]></content>
      
      <categories>
          
          <category> 金融 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 财务分析 </tag>
            
            <tag> 资本成本 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>债务成本的计算</title>
      <link href="/2018/07/29/cost-of-debt/"/>
      <url>/2018/07/29/cost-of-debt/</url>
      <content type="html"><![CDATA[<p>​     <a id="more"></a></p><p>前面一节引入了企业资本成本的问题，我们提到，企业的筹资成本包括债务和权益成本。  </p><h2 id="上节回顾"><a href="#上节回顾" class="headerlink" title="上节回顾"></a>上节回顾</h2><p>上一节主要研究了权益成本，包括普通股和优先股权益成本。普通股成本可以用两种方式来计算：  </p><ul><li>DDM折现法</li><li>CAPM法，利用β来计算<br>优先股的成本可以直接用永续年金的方法来计算。  </li></ul><p>其实上一节还落了一点：权益成本还有一种：留存收益成本。也就是说，企业在赚了钱之后，只把利润的一部分进行了分红，剩下的留在企业，继续用来发展企业。  </p><p>既然没有把好处都分给股东，那么股东自然对留下的这部分钱是有收益的期望的。这个期望就等于普通股的收益。也就是说，留存收益的资本成本就等于<strong>没有发行成本的</strong>普通股成本。  </p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Kre</span> = D1/pv +g</span><br></pre></td></tr></table></figure><p>这里： </p><ul><li>Kre就是留存收益的成本</li><li>D1是预计明年的股利</li><li>Pv是股票当前的价格</li><li>g是预计股利每年的增长率</li></ul><h2 id="债务成本"><a href="#债务成本" class="headerlink" title="债务成本"></a>债务成本</h2><p>前面说过，这里的债务都指的是长期债务。也分两种：  </p><ul><li>长期借款</li><li>长期债券</li></ul><p>现在以长期债券为例，计算债券的债务成本。  </p><p>根据现值和终值的理论，长期债券的现值等于未来每年所收到的利息，以及债券到期后本金的折现到现在的现值。  </p><p>根据前面的公式：  </p><p><img src="http://pah1qyen2.bkt.clouddn.com/blog/180728/FiF9GAGA18.png?imageslim" alt="mark"></p><p>这两项中，第一项就是所有利息的折现的现值，第二项是本金折现成的现值。  </p><p>公式里的参数分别是：  </p><ul><li>pmt：每年的利息</li><li>FV：债券到期回收的本金</li><li>kd: 债券的成本</li><li>VB: 债券的现值</li></ul><p>上面这个公式直接用一般的数学方法是算不出来的，一般采用试错的方法来得到。  </p><p>当然，在Excel里，可以使用RATE函数。怎么来理解呢？一步一步来。  </p><ul><li>期初花了PV的钱购买了一个债券</li><li>每一期回收PMT的利息，直到最后一期</li><li>最后一期所得到的终值价值为FV</li></ul><p>有了这些内容，就可以使用RATE函数求解了。  </p><p>长期借款的计算方式和长期债券相仿，就不再详细介绍了。</p><h2 id="税盾"><a href="#税盾" class="headerlink" title="税盾"></a>税盾</h2><p>用上面的方法，我们就可以算出来一个债务成本。这个成本的计算并没有考虑税。企业在支付息税的时候，先付息，再付税，那么税收对企业债务成本有什么影响呢？  </p><p>举个例子来看。  </p><p>如果有两家企业，息税前利润（EBIT）都是300，不同的是，公司A有100块借款利息要付，而公司B没有任何借款。我们假设企业所得税税率为25%。  </p><p>那么，公司A扣除利息和税后的收入为：<code>200-200*0.25=150</code><br>公司B扣除息税后的净利润为：<code>300-300*0.25=225</code>  </p><p>可以看得出来，税前净利润A比B少了100，而税后只少了75，利息的存在具有抵税的作用。  </p><p>所以，企业所需要还的利息当中，有一部分是用来抵税的，因为如果你不借款，就要交更多的税。剩下的部分，是企业真正要负担的，也就是kd(1-t)。其中，</p><ul><li>kd是税前债务成本</li><li>t是税率</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>得到了每一个个别资本成本（普通股，优先股，长期借款，长期债券）的值后，我们接下来就需要确认各个资本的权重，然后就可以计算出加权平均资本成本（WACC）了。</p>]]></content>
      
      <categories>
          
          <category> 金融 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 财务分析 </tag>
            
            <tag> 资本成本 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>资本成本和权益成本</title>
      <link href="/2018/07/27/cost-of-capital-and-equity/"/>
      <url>/2018/07/27/cost-of-capital-and-equity/</url>
      <content type="html"><![CDATA[<p>​    </p><a id="more"></a>   <h2 id="资本成本的意义"><a href="#资本成本的意义" class="headerlink" title="资本成本的意义"></a>资本成本的意义</h2><p>一个企业需要正常运营，就需要资本。那么企业的资本一般从哪里来的呢？  </p><p>一般来说，企业的资本，要么是从外面借的，要么就是股东投的。<br>我们通过资产负债表来看的话，大概有这么几个资本来源：  </p><ul><li>长期负债</li><li>优先股东投资</li><li>普通股东投资  </li></ul><blockquote><p>资本和资金：资金包括短期和长期资金，长期资金一般被称为资本。  </p></blockquote><p>都说天下没有免费的午餐。资本如果是从外面借的，那么债权人是需要向企业收取利息的。<br>资本如果是股东投的，那么股东对自己的投资也是有期望的，因为股东是有机会成本的。 </p><blockquote><p>一般来说，股东的机会成本就是企业所在行业的平均投资收益率。</p></blockquote><p>这两种成本作用到一起，就可以得到公司使用这些资本的代价，也就是公司的资本成本。很显然，如果公司的收益比资本成本还低的话，公司就是在做赔本买卖了。  </p><blockquote><p>公司投资所应获得的最低回报率叫做 hurdle rate</p></blockquote><p>资本成本的意义就在这里。知道了资本成本以后，结合投资的预期收益就可以决定是否要进行投资了。  </p><h2 id="权益成本"><a href="#权益成本" class="headerlink" title="权益成本"></a>权益成本</h2><p>权益成本(Cost of Equity)，包括普通股和优先股成本。</p><h3 id="什么是优先股和普通股"><a href="#什么是优先股和普通股" class="headerlink" title="什么是优先股和普通股"></a>什么是优先股和普通股</h3><p>这两个的区别主要体现在股利的发放数目和发放日期上。 </p><p>优先股（Preferred Stock）有优先接受股利的权利，优先股的股利会定期发放，并且数额固定。从这个层面来看的话，优先股其实就是一项永续年金。  </p><p>普通股（Common Stock）股利的发放日期不定，数量也不确定，也就是说，能不能收到股利，全看上市公司董事会的心情。中国多数的上市公司都是不发放股利的。  </p><h3 id="优先股成本的计算"><a href="#优先股成本的计算" class="headerlink" title="优先股成本的计算"></a>优先股成本的计算</h3><p>我们知道，投资一个股票，获利有两种方式，一种是收股利，一种是价差买卖。而优先股在交易方面，只能通过公司赎回，或者转成普通股（能不能转需要根据公司发行优先股的时候来确定）。<br>所以，优先股就可以被看做是一个永续年金。  </p><p>永续年金折成现值的计算公式我们前面学过：<br><img src="http://pah1qyen2.bkt.clouddn.com/blog/180727/je2fLLkEKG.png?imageslim" alt="mark"></p><p>在优先股股利固定，也就是g=0，年金永续，也就是n趋向于无穷大，pmt也就是D，因此可以得到：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pv</span> = D/kp</span><br></pre></td></tr></table></figure><p>其中D是每年能领到的股利，pv就是优先股的发行价格，这样我们就能计算出kp，也就是优先股的成本。  </p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kp</span> = D/pv</span><br></pre></td></tr></table></figure><p>也就是说，发行价越高，优先股的成本越低。  </p><blockquote><p>在中国，发行的优先股并不多。  </p></blockquote><h3 id="普通股的成本计算"><a href="#普通股的成本计算" class="headerlink" title="普通股的成本计算"></a>普通股的成本计算</h3><p>前面说过，普通股的资产回报有两种方式：股利和交易。于是，也对应了两种计算普通股成本的方式。  </p><ol><li>股利折现法（DDM）</li></ol><p>这里需要有几个假设：</p><ul><li>每年都有股利</li><li>股利每年都以g的增长率增长</li></ul><p>于是和上面的优先股的年金计算方式类似，可以得到普通股的现值公式：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pv = D1/(<span class="name">ks-g</span>)=D0*(<span class="number">1</span>+g)/(<span class="name">ks-g</span>)</span><br></pre></td></tr></table></figure></p><p>再稍作运算，就可以得到：   </p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ks</span>=D1/pv +g</span><br></pre></td></tr></table></figure><ol start="2"><li>资本定价法</li></ol><p>这个也就是传说中的CAPM法，这个方法算是奠定了现代财务分析的基础。  </p><p>简单点来讲，CAPM法就是通过股票与大盘走势的对比，通过一个风险因子（β），大概估出一个股价的增长率。  </p><p>怎么求β就够讲半天了，因此在这里先讲结论：  </p><p><img src="http://pah1qyen2.bkt.clouddn.com/blog/180727/cB9f0eECJE.png?imageslim" alt="mark"></p><p>也就是说，知道了β，大盘的期望收益(Rm)，无风险收益率(Rf)，就可以求出股票的期望收益了。如果投资公司的收益达不到计算出的期望收益，股民是没有必要投资这个公司的。  </p><p>除了权益成本以外，还有一个很重要的部分，就是债务成本，这个我们后面再详细研究。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://wenku.baidu.com/view/6d8b2915e45c3b3566ec8b41.html?from=search" target="_blank" rel="noopener">https://wenku.baidu.com/view/6d8b2915e45c3b3566ec8b41.html?from=search</a>  </p>]]></content>
      
      <categories>
          
          <category> 金融 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 财务分析 </tag>
            
            <tag> 资本成本 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>对报表进行比率分析</title>
      <link href="/2018/07/24/ratio-analysis/"/>
      <url>/2018/07/24/ratio-analysis/</url>
      <content type="html"><![CDATA[<p>​    </p><a id="more"></a>    <h2 id="什么是比率分析？"><a href="#什么是比率分析？" class="headerlink" title="什么是比率分析？"></a>什么是比率分析？</h2><p>前面的三张报表，把一个企业从资本，盈利能力，以及风险的角度进行剖析，展示了一个企业的现状。  </p><p>拿当然，仅仅看到报表里的绝对值数字是不够的，我们还要分析这些数字意味着什么，这个时候就要进行比率分析。  </p><p>所谓比率分析，其实就是分析各个财务数字之间的比率（ratio）关系。通过对比一家公司同一个比率指标在不同时期的表现，或者对比一家公司的某个比率指标与整个行业平均值，就可以判断出这家公司的财务和经营状况。  </p><p>另外，需要注意的是，<strong>单单比较某一个比率是没有意义的</strong>，<strong>需要将多个比率结合起来对比才能做出正确的判断</strong>。  </p><h2 id="比率有哪些分类？"><a href="#比率有哪些分类？" class="headerlink" title="比率有哪些分类？"></a>比率有哪些分类？</h2><ul><li>流动性比率</li><li>盈利能力比率</li><li>营运效率比率</li><li>杠杆比率</li><li>偿债保障比率  </li></ul><h2 id="流动性比率"><a href="#流动性比率" class="headerlink" title="流动性比率"></a>流动性比率</h2><h3 id="流动性"><a href="#流动性" class="headerlink" title="流动性"></a>流动性</h3><p>流动性，基本可以理解为资产变为现金的速度。<br>一个企业资产变为现金的速度越快，其流动性就越快。<br>那一个企业哪些资产容易变成现金啊？前面我们说过，流动资产是最容易变成现金的。并且，在流动资产里各项的排序，也是按照其变成现金的先后顺序来的–货币资金本身就是现金，存货要生产出来卖掉，才有可能变成现金。  </p><h3 id="流动比"><a href="#流动比" class="headerlink" title="流动比"></a>流动比</h3><p>一般来说，流动资产转化成现金后，多数情况下是用来偿还流动负债。<br>因此，我们可以用流动资产除以流动负债来得到流动比。  </p><p><code>流动比率=流动资产/流动负债</code></p><blockquote><p>流动比： Current Ratio  </p></blockquote><p>显然,流动比越高，偿债能力越强。像苹果这种公司有450亿美金现金在账面上的公司，是几乎不用担心他换不上账的（当然，苹果公司也有很多流动负债）  </p><h3 id="速动比"><a href="#速动比" class="headerlink" title="速动比"></a>速动比</h3><p>上面说过，流动资产里最不容易变成现金的是存货。存货先要经过生产，销售环节，才有可能变成应收或者货币资金。更何况，存货很有可能因为市场环境或者公司策略的原因，要很长时间才能被销售掉。<br>所以，把存货从流动资产中拿走，用剩下的流动资产除以流动负债，就得到的速动比。  </p><p><code>速动比=（流动资产-存货）/流动负债</code><br>同样，速动比越高，代表公司资产的流动性越强。  </p><h2 id="盈利能力比率"><a href="#盈利能力比率" class="headerlink" title="盈利能力比率"></a>盈利能力比率</h2><p>盈利能力是对利润表进行的分析。</p><h3 id="毛利"><a href="#毛利" class="headerlink" title="毛利"></a>毛利</h3><p><code>毛利=(营业收入-营业成本)/营业收入</code>  </p><h3 id="净利率"><a href="#净利率" class="headerlink" title="净利率"></a>净利率</h3><p><code>净利率= 净利润/营业收入</code><br>当然，净利率越高越好。但是呢，我们前面说过，净利润高不一定是真金白银，有可能是公允价值高，所以不一定能完全说明问题。因此，考察营业利率也很必要。  </p><h3 id="营业利率"><a href="#营业利率" class="headerlink" title="营业利率"></a>营业利率</h3><p><code>营业利率=营业利润/营业收入</code>  </p><p>这个指标越高，就说明营业活动收益越高</p><h3 id="总资产报酬率"><a href="#总资产报酬率" class="headerlink" title="总资产报酬率"></a>总资产报酬率</h3><p>又被称为ROA，代表的是单位资产所能取得的利润回报<br><code>ROA=净利润/总资产</code></p><h3 id="净资产报酬率"><a href="#净资产报酬率" class="headerlink" title="净资产报酬率"></a>净资产报酬率</h3><p>又被称为ROE，代表的是单位净资产（总资产-负债），也就是单位股东权益所能获得的利润回报。<br><code>ROE=净利润/股东权益</code></p><h2 id="营运效率比率"><a href="#营运效率比率" class="headerlink" title="营运效率比率"></a>营运效率比率</h2><p>基本上可以这么理解，营运效率指的就是公司的各种资源的效率，也就是周转速度。周转的越快，代表营运效率是越高的。  </p><h3 id="应收账款周转率"><a href="#应收账款周转率" class="headerlink" title="应收账款周转率"></a>应收账款周转率</h3><p>基本上来说，这就是企业在实际运营过程中最关心的周转率之一。<br>应收账款代表的是企业的赊销，这个数字越低，企业坏账的风险也会越低。<br>应收账款周转率的公式如下： </p><p><code>应收账款周转率=营业收入/应收账款</code>  </p><blockquote><p>我们看到，这个比率实际上是把利润表和资产负债表的相应数字的结合。然而，利润表反映的是一段时期之内的表现，而资产负债表反映的是某个时间节点的表现。因此，为了统一，应收账款需要使用期初和期末的应收账款的平均值。  </p></blockquote><p>应收账款周转率代表一年之内应收账款的周转次数。于是，用一年的天数，除以应收账款周转率，便可以得到平均账期。  </p><h3 id="存货周转率"><a href="#存货周转率" class="headerlink" title="存货周转率"></a>存货周转率</h3><p>代表一年之内存货的周转次数。  </p><p><code>存货周转率=营业成本/存货</code>  </p><p>同样的，在这个公式里的存货需要使用期初和期末的平均数。  </p><h3 id="固定资产周转率"><a href="#固定资产周转率" class="headerlink" title="固定资产周转率"></a>固定资产周转率</h3><p>代表单位固定资产所能产生的营业收入。  </p><p><code>固定资产周转率=营业收入/固定资产</code></p><h3 id="总资产周转率"><a href="#总资产周转率" class="headerlink" title="总资产周转率"></a>总资产周转率</h3><p>代表单位资产所能产生的营业收入。这个数值当然是越高越好。 </p><p><code>总资产周转率=营业收入/总资产</code>  </p><blockquote><p>不要忘记使用期初和期末的平均值  </p></blockquote><h3 id="重新审视ROA"><a href="#重新审视ROA" class="headerlink" title="重新审视ROA"></a>重新审视ROA</h3><p>有了上面这些比率，我们就可以重新审视ROA了。  </p><p><img src="http://pah1qyen2.bkt.clouddn.com/blog/180723/L91ia6F3gj.png?imageslim" alt="mark"></p><p>也就是说，总资产报酬率等于利润率与总资产周转率的乘积。  </p><p>这也就可以解释提高资产报酬率的两种方式：提高利润率(比如生产高端产品)，或者加快资产周转(薄利多销)。  </p><h2 id="杠杆比率"><a href="#杠杆比率" class="headerlink" title="杠杆比率"></a>杠杆比率</h2><p>一个公司在发展的过程中，必不可少需要使用杠杆。看看15年股灾的时候证监会去杠杆引起了多大的震动，就知道杠杆比率有多重要。  </p><h3 id="总负债比"><a href="#总负债比" class="headerlink" title="总负债比"></a>总负债比</h3><p>资产负债表的右边，是负债和股东权益，分别代表了债主和股东的利益。因为企业在还完债之后才可以对股东进行分红，因此很有必要考察企业的负债比。 </p><p><code>总负债比=负债/总资产</code>  </p><h3 id="权益乘数"><a href="#权益乘数" class="headerlink" title="权益乘数"></a>权益乘数</h3><p>从另外一个方面显示杠杆比以及负债比。 </p><p><code>权益乘数=总资产/股东权益</code>  </p><p>权益乘数越高，就代表资产中股东权益的比例越小，也就是负债的比例越高，财务风险越大。  </p><h2 id="偿债保障比率"><a href="#偿债保障比率" class="headerlink" title="偿债保障比率"></a>偿债保障比率</h2><p>这个比率和流动性比率相仿，表示的都是偿债能力。  </p><h3 id="利息保障倍数"><a href="#利息保障倍数" class="headerlink" title="利息保障倍数"></a>利息保障倍数</h3><p>使用息税前利润(EBIT)与利息的比值来表示公司偿还利息的能力。  </p><p><code>利息保障倍数=EBIT/利息</code></p>]]></content>
      
      <categories>
          
          <category> 金融 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 报表 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>财务报表之现金流</title>
      <link href="/2018/07/13/cash-flow/"/>
      <url>/2018/07/13/cash-flow/</url>
      <content type="html"><![CDATA[<p>​     </p><a id="more"></a><h2 id="为什么需要现金流量表？"><a href="#为什么需要现金流量表？" class="headerlink" title="为什么需要现金流量表？"></a>为什么需要现金流量表？</h2><p>在研究利润表的时候我们说过，利润高并不等于现金多。<br>举个最简单的例子，营业收入高，说明产品卖出去的多，但是，产品卖出去的多不代表能立刻收回账来。收回账来也不一定收回的是现金，还有可能是6个月的承兑。  </p><p>然而，一个企业在运营的时候需要花现金的地方简直太多了。企业每个月都会要付出利息，总不能用银行承兑来抵利息吧？就算企业可以赊账购买原料，但不可能所有供应商都愿意让企业赊账吧？  </p><p>再举个更简单的例子：多数销售人员在大学刚毕业的时候，没攒下什么钱，可偏偏要经常出差，所有费用都要自己先垫付，然后找公司报销。要报销的钱，从财务上来看，都是应收账款。要报销的数额越大，就相当于公司占用了越多的个人现金。如果个人积蓄不够雄厚，过几个月可能就没有钱付房租了。  </p><p>类比过来，企业的经营也是如此。资产负债表能看到企业的家底，利润表能看到企业到底赚不赚钱，现金流量表则是从运营风险的角度来看企业的运转是否正常。  </p><h2 id="现金流量表是怎么组织的？"><a href="#现金流量表是怎么组织的？" class="headerlink" title="现金流量表是怎么组织的？"></a>现金流量表是怎么组织的？</h2><p>一个基本的概念是，一个企业始终在进行经营，投资和融资活动。<br>那么，把每一种活动的每一笔现金流入和流出都记录下来，最后再根据企业活动类型（经营，投资，融资）以及流向（流入，流出）来进行分类，就可以得到一张现金流量表。  </p><p>没错，现金流量表就是把现金（注意一定是现金）的流水账，分分类，然后用类似数据透视表（Pivot Table）的技术进行汇总。</p><h2 id="经营，投资和融资各包括什么活动？"><a href="#经营，投资和融资各包括什么活动？" class="headerlink" title="经营，投资和融资各包括什么活动？"></a>经营，投资和融资各包括什么活动？</h2><p>大致上，这三项活动涉及的现金流入流出可以这样来划分：  </p><h4 id="经营活动"><a href="#经营活动" class="headerlink" title="经营活动"></a>经营活动</h4><ul><li>流入<ul><li>销售</li><li>税收（退税）</li></ul></li><li>流出<ul><li>采购</li><li>税收（交税）</li><li>人工</li></ul></li></ul><h4 id="投资活动"><a href="#投资活动" class="headerlink" title="投资活动"></a>投资活动</h4><ul><li>对内投资<ul><li>流入<ul><li>处置资产 </li></ul></li><li>流出<ul><li>购建固定资产（注意购买固定资产是投资，不是经营活动）</li></ul></li></ul></li><li>对外投资<ul><li>流入<ul><li>处置收益</li></ul></li><li>流出<ul><li>投资</li></ul></li></ul></li></ul><h4 id="融资活动"><a href="#融资活动" class="headerlink" title="融资活动"></a>融资活动</h4><ul><li>债务融资<ul><li>流入<ul><li>借款，融入资本 </li></ul></li><li>流出<ul><li>还本付息</li></ul></li></ul></li><li>股权融资<ul><li>流入<ul><li>融入资金</li></ul></li><li>流出<ul><li>分红</li></ul></li></ul></li></ul><h2 id="现金流量表与资产负债表的关系是什么？"><a href="#现金流量表与资产负债表的关系是什么？" class="headerlink" title="现金流量表与资产负债表的关系是什么？"></a>现金流量表与资产负债表的关系是什么？</h2><p>现金流量表展示的也是某个时间段内，资产负债表中货币资金的变化。也就是说，现金流量表完全是在详细的解释货币资金发生了什么变化，这些变化是由什么造成的。  </p><p>再把利润表也拉进来，我们就可以得到这三张报表之间最直截了当的关系：<br>资产负债表是主体，利润表和现金流量表从盈利能力以及企业风险的角度来更深层次揭示企业的财务运转情况。  </p>]]></content>
      
      <categories>
          
          <category> 金融 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 报表 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>财务报表之利润表</title>
      <link href="/2018/07/13/income-statement/"/>
      <url>/2018/07/13/income-statement/</url>
      <content type="html"><![CDATA[<p>​    </p><a id="more"></a><p>前面我们说过，资产负债表是反映一个企业家底的表格。既然如此，为了更深入地了解企业，很自然有一个问题就冒了出来：  </p><blockquote><p>企业的钱都是从哪里赚来的？  </p></blockquote><p>资产负债表的股东权益里有一项叫做未分配利润，上面这个问题其实就是问：未分配利润是怎么来的？  </p><p>所以，我们需要深入研究一个企业的收入，以及盈利能力。利润表就是用来干这个的。  </p><h2 id="利润表是怎么做出来的"><a href="#利润表是怎么做出来的" class="headerlink" title="利润表是怎么做出来的"></a>利润表是怎么做出来的</h2><p>说白了，利润表就是收入减去各种费用得来的，这和我们平时算账差不多。  </p><p>利润表里的各项元素有下面这些：</p><h3 id="营业收入"><a href="#营业收入" class="headerlink" title="营业收入"></a>营业收入</h3><p>这个术语一看就知道是属于经营活动产生的收入。<br>这里要注意一点：营业收入是不包含增值税的。<br>具体点讲，增值税是价外税，并且是流转税，实际上最终都是由消费者承担的，所以增值税不影响最终损益。<br>也就是说，增值税在利润表中是不体现的。  </p><h3 id="营业成本"><a href="#营业成本" class="headerlink" title="营业成本"></a>营业成本</h3><p>生产或者营业所产生的成本。产生成本的项目很多，也可以分成两种：  </p><ul><li>可变成本<br>简单点理解，可变成本就是跟随产品产量变化的成本。<br>例如，生产一台电脑需要很多芯片，电脑生产的越多，就需要越多芯片。如果不生产电脑，就不需要付芯片的钱。<br>在上面这个例子里，芯片就属于电脑生产的可变成本。  </li><li>固定成本<br>简单点理解，公司生产或不生产，固定成本就在那里，不多不少。<br>举个例子，为了生产电脑需要购买流水线，价格1000万，折旧5年。那么不管公司生不生产电脑，固定资产折旧的成本每年都是200万（按照线性折旧来计算）。<br>假设一条流水线每年能生产1万台电脑，每一天电脑的芯片成本1000元（不考虑其他可变成本），那么公司出来的电脑需要卖至少要卖200/1+1000=1200块才能保本。但是在某些极端情况下，如果市场下游需求不好，很有可能1100块也可以卖，每台电脑还可以赚100块来抵消一部分固定成本。</li></ul><h3 id="营业税金及附加"><a href="#营业税金及附加" class="headerlink" title="营业税金及附加"></a>营业税金及附加</h3><p>在中国有一个特色税种，叫做营业税。<br>营业税是一种价内流转税，以前一般都使用在服务业。<br>营业税的特点是：企业在经营，不管有没有赚钱，都得交营业税。<br>不过16年5月国家全面实施了营改增，营业税算是退出历史舞台了，这个科目也变成了税金及附加。<br>附加又指的是什么呢？<br>调整过后的附加包括：消费税、城市维护建设税、资源税、教育费附加及房产税、土地使用税、车船使用税、印花税等</p><h3 id="营业费用"><a href="#营业费用" class="headerlink" title="营业费用"></a>营业费用</h3><p>在生产和销售过程中所产生的费用。一般包括：  </p><ul><li>清关报关费用</li><li>物流费用</li><li>货物保险</li><li>由销售活动所带来的费用，如销售人员的差旅费用，工资等</li><li>广告费</li></ul><h3 id="管理费用"><a href="#管理费用" class="headerlink" title="管理费用"></a>管理费用</h3><p>与企业的管理环节相关的费用。包括：  </p><ul><li>管理部门职工工资</li><li>管理人员的差旅费用</li><li>研发费用</li><li>咨询费</li><li>公司办公楼的折旧</li></ul><h3 id="财务费用"><a href="#财务费用" class="headerlink" title="财务费用"></a>财务费用</h3><p>企业经营过程中筹资或者银行存款所发生的费用，包括：</p><ul><li>利息支出</li><li>利息收入</li><li>手续费</li><li>汇兑损益</li></ul><p>上面的这些项目，是企业基本经营和筹资方面所产生的收益部分，当然，其他因素也能影响企业的利润，这些又包括：</p><h3 id="投资收益"><a href="#投资收益" class="headerlink" title="投资收益"></a>投资收益</h3><p>投资收益是企业营业利润当中的一部分，指的是企业投资所产生的收益，包括股利，分红等等。  </p><h3 id="资产减值损失"><a href="#资产减值损失" class="headerlink" title="资产减值损失"></a>资产减值损失</h3><p>如果资产相对于历史成本发生减值，就需要把减值也记录在利润表里。<br>当然，如果资产升值的话，利润表是不做记录的。  </p><h3 id="公允价值变动收益"><a href="#公允价值变动收益" class="headerlink" title="公允价值变动收益"></a>公允价值变动收益</h3><p>对于金融资产来说，是有公允价值(Fair Value)的，如果企业所拥有的金融或者房地产资产比上一期末有变化，也需要把变化的值记录下来。  </p><p>有了上面这些信息，我们就可以得到企业的营业利润了。  </p><h3 id="营业利润"><a href="#营业利润" class="headerlink" title="营业利润"></a>营业利润</h3><p>通过简单的数学计算就可以得到：  </p><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">营业利润</span>=<span class="string">营业收入-营业成本-税金及附加-营业费用-管理费用-财务费用+投资收益-资产减值损失+公允价值变动收益</span></span><br></pre></td></tr></table></figure><p>除了正常的营业利润，企业在一个周期内可能会有一些其他收入或者支出，而这些收入或支出不一定是由于营业带来的。</p><h3 id="营业外收入"><a href="#营业外收入" class="headerlink" title="营业外收入"></a>营业外收入</h3><p>企业在营业范围以外所获得的收入，例如： </p><ul><li>获得政府补贴</li><li>出售无形资产（专利，商标等）</li><li>处置固定资产收入</li><li>罚款收入</li></ul><h3 id="营业外支出"><a href="#营业外支出" class="headerlink" title="营业外支出"></a>营业外支出</h3><p>与上面营业外收入对应，指企业在经营范围以外的支出，例如：</p><ul><li>处置固定资产损失</li><li>公益捐款</li><li>非常损失（例如火灾等等）</li><li>固定资产盘亏</li></ul><p>有了营业外的收入和支出，我们就可以再进一步，获得企业利润总额了。  </p><h3 id="利润总额"><a href="#利润总额" class="headerlink" title="利润总额"></a>利润总额</h3><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">利润总额</span>=<span class="string">营业利润+营业外收入-营业外支出</span></span><br></pre></td></tr></table></figure><h3 id="所得税费用"><a href="#所得税费用" class="headerlink" title="所得税费用"></a>所得税费用</h3><p>这个不需要解释，赚了钱，还能不交税？中国企业所得税的税率是25%，老老实实交税吧！<br>这里要注意一点：所得税的税率是25%，并不代表拿到手里的钱一定是利润总额的75%</p><blockquote><p>应税所得是税法规定的，可能会高于利润总额  </p></blockquote><h3 id="净利润"><a href="#净利润" class="headerlink" title="净利润"></a>净利润</h3><p>交完税了，剩下的就是净利润了。<br><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">净利润</span>=<span class="string">利润总额-所得税费用</span></span><br></pre></td></tr></table></figure></p><h2 id="利润不等于现金流"><a href="#利润不等于现金流" class="headerlink" title="利润不等于现金流"></a>利润不等于现金流</h2><p>正常来看，在企业的资产负债表上的股东权益部分，是可以体现利润情况的。如果只看一个总数，利润很高，会很亮眼。但是，这些利润是从哪来的？这些高利润是否能够持久维持？这两个问题仅仅看一个数字是看不出来的。<br>所以，我们需要有一张利润表，把企业各个方面的盈利能力一一量化，这样我们就会对企业来钱的能力有更深刻的认识。  </p><p>但是，利润高和有钱不是一回事！  </p><p>我们看到前面，利润高的原因可能有很多：  </p><ul><li>营业收入高</li><li>一般费用低</li><li>公允价值变动收益多</li><li>投资收益多</li></ul><p>这里面：  </p><ul><li>公允价值变动收益可能根本不会立刻带来现金</li><li>营业收入高，不代表所有账款都已经收回来</li></ul><p>所以，光有资产负债和利润表并不能体现出企业的货币资金的情况，这个时候就需要一张现金流量表了。  </p><h2 id="利润表是一个阶段企业利润的显示"><a href="#利润表是一个阶段企业利润的显示" class="headerlink" title="利润表是一个阶段企业利润的显示"></a>利润表是一个阶段企业利润的显示</h2><p>我们前面说过，资产负债表显示的是某一个特定的时间点，企业所拥有的资产情况。<br>而利润表不同，利润表表示的是一个时间段内（通常是指1个季度，半年，3个季度，全年），公司的盈利情况。</p>]]></content>
      
      <categories>
          
          <category> 金融 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 报表 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>财务报表之资产负债表</title>
      <link href="/2018/07/04/balance-sheet/"/>
      <url>/2018/07/04/balance-sheet/</url>
      <content type="html"><![CDATA[<p>​    </p><a id="more"></a><h2 id="企业的主要行为是什么？"><a href="#企业的主要行为是什么？" class="headerlink" title="企业的主要行为是什么？"></a>企业的主要行为是什么？</h2><ul><li>经营</li><li>投资</li><li>融资  </li></ul><h2 id="资产负债表是什么？"><a href="#资产负债表是什么？" class="headerlink" title="资产负债表是什么？"></a>资产负债表是什么？</h2><p>反映一个企业所拥有的资产的，也就是企业家底的一个表格。<br>资产就是是可以货币表示的东西<br>资产仅仅是企业资源的一部分  </p><h2 id="资产负债表由哪些构成？"><a href="#资产负债表由哪些构成？" class="headerlink" title="资产负债表由哪些构成？"></a>资产负债表由哪些构成？</h2><h3 id="资产"><a href="#资产" class="headerlink" title="资产"></a>资产</h3><p>从流动性上来看，两大类，6小类  </p><h4 id="流动资产"><a href="#流动资产" class="headerlink" title="流动资产"></a>流动资产</h4><p>一般指一年（或者一个经营周期）内可以转化成现金的资产<br>流动资产包括三项主要的资产</p><ol><li>货币资金</li><li>债券<ul><li>应收账款</li><li>预付账款</li></ul></li><li>存货</li></ol><h4 id="非流动资产"><a href="#非流动资产" class="headerlink" title="非流动资产"></a>非流动资产</h4><p>一般指一年（一个周期）以上才可以转化成现金的资产</p><ol><li>长期投资<br>比较重要的是长期股权投资，经常用来做文章</li><li>固定资产<ul><li>固定资产</li><li>在建工程</li><li>固定资产清理</li><li>投资性房地产</li></ul></li><li>无形资产以及其他非流动资产<ul><li>无形资产</li><li>开发支出</li><li>商业信誉等</li></ul></li></ol><p>从对利润的贡献方式来看的话，也分两类：  </p><h4 id="经营资产"><a href="#经营资产" class="headerlink" title="经营资产"></a>经营资产</h4><ul><li>货币</li><li>债券</li><li>存货</li><li>固定资产</li><li>无形资产<h4 id="投资资产"><a href="#投资资产" class="headerlink" title="投资资产"></a>投资资产</h4></li><li>可供出售金融资产</li><li>持有至到期的投资</li><li>长期股权投资  </li></ul><p>资产负债表的右边，就是写明了资产的归属，资产的归属有两种人：  </p><ul><li>债权人</li><li>股东</li></ul><h3 id="负债"><a href="#负债" class="headerlink" title="负债"></a>负债</h3><p>流动负债: 企业在一年（一个周期）之内必须要支付的负债</p><ul><li>短期借款</li><li>应付账款</li><li>预收账款   </li></ul><p>非流动负债：一年以后才需要偿还的负债  </p><ul><li>长期借款</li><li>长期应付款</li><li>其他非流动资产</li></ul><h3 id="股东权益"><a href="#股东权益" class="headerlink" title="股东权益"></a>股东权益</h3><ul><li>实收资本/股本<br>股本是针对上市公司而言的，普通的公司叫实收资本。<br>在中国就是注册资本，股本的总额体现出了公司对外承担的法律责任的上限  </li><li>资本公积<br>股东入资导致超过股本，多出来的部分就放到资本公积里</li><li>盈余公积<br>中国规定企业10%的利润一定要存到盈余公积里    </li><li>未分配利润<br>公司利润先留10%到盈余公积，然后剩下的部分再分红，最后还剩下的部分就叫未分配利润   </li></ul><h2 id="一个守恒定律"><a href="#一个守恒定律" class="headerlink" title="一个守恒定律"></a>一个守恒定律</h2><p>资产= 负债+股东权益，放之四海而皆准  </p><p>资产形态的变化，不影响负债和股东权益的变化。也就是说，用现金投资了固定资产，变化的只是资产部分的内部，而负债和股东权益是不会变的。<br>如果资产小于负债，导致股东权益为负，就是资不抵债  </p><h2 id="资产负债表意味着什么？"><a href="#资产负债表意味着什么？" class="headerlink" title="资产负债表意味着什么？"></a>资产负债表意味着什么？</h2><p>资产负债表显示的只是某个特定时刻，例如年末或者季度末，公司整体的家底。但在这一年里发生了什么？资产负债表上是看不出来的。<br>结果导向，是资产负债表最大的特点。  </p>]]></content>
      
      <categories>
          
          <category> 金融 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 报表 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>连续复利的计算</title>
      <link href="/2018/06/25/continuous-compounding/"/>
      <url>/2018/06/25/continuous-compounding/</url>
      <content type="html"><![CDATA[<p>​    </p><a id="more"></a><p>我们前面说过，时间是投资的朋友，其实也就是说，复利可以生成更多的终值。<br>如果现在银行定期的年存款利率为5%，并且你计划存12000块到银行存款。现在有两家银行可选，一家银行半年结一次息，另外一家银行3个月结一次息。如果想到年底获得最大的终值，应该怎么选呢？  </p><p>前面我们说过，终值的计算公式是这样子的：  </p><p><img src="http://pah1qyen2.bkt.clouddn.com/blog/180625/jf788E778B.png?imageslim" alt="mark">  </p><ul><li>其中i是年华利率  </li><li>n是以年计算的期数</li></ul><p>如果把一年分成m期，那么每期的收益率就变成了i/m,总共的期数就变成了nm。上面的公式就变成了：  </p><p><img src="http://pah1qyen2.bkt.clouddn.com/blog/180625/2iji6i1lll.png?imageslim" alt="mark">  </p><p>假设银行允许你极限操作，每年可以分成的期数m允许为无穷大，我们队上面公式求个极限：  </p><p><img src="http://pah1qyen2.bkt.clouddn.com/blog/180625/5Dgaj3dh2L.png?imageslim" alt="mark"></p><p>也就是说，在每年可以分成无穷多期的情况下，每年的收益可以逼近<code>e^i-1</code>  </p><p>最后，我们用Excel来模拟一下一年分成多期的情况。下面这个图列出了每年分的期数，以及对应的终值。可以看得出来，期数越多，终值是越高的。不过貌似分52期和分一期最后只差了0.1%，资金量小的时候，差别不大，但当资金量大的时候，这0.1%还是很可观的。<br><img src="http://pah1qyen2.bkt.clouddn.com/blog/180625/Ji48B9L63K.png?imageslim" alt="mark">  </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><code>e^i-1</code>这个极限值要记住</li></ul>]]></content>
      
      <categories>
          
          <category> 金融 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Excel </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>递增年金的终值和现值</title>
      <link href="/2018/06/25/growing-annuities/"/>
      <url>/2018/06/25/growing-annuities/</url>
      <content type="html"><![CDATA[<p>​    </p><a id="more"></a><p>上一篇文章中，我们探讨了货币的时间价值，以及年金在每期数额相等的情况下，所对应的现值和终值。<br>实际情况中，我们也会经常遇到年金不断增长的情况。比如说下面这个例子：<br>现在有一笔钱要存入银行，存款利率为5%。你准备在未来6年每年提出10000块钱用作孩子的学费。然而，学费以每年3%的速度增长。那么，你现在需要存入多少钱才可以？  </p><h2 id="传统数学方法计算现值"><a href="#传统数学方法计算现值" class="headerlink" title="传统数学方法计算现值"></a>传统数学方法计算现值</h2><p>我们假设年金每年的增长率为g(上面例子为3%)<br>投资利率为i(上面例子为5%)<br>起始年金为pmt(上面例子为10000)<br>期数为n(上面例子为6)  </p><p>在这种情况下，年金的示意图为：  </p><p><img src="http://pah1qyen2.bkt.clouddn.com/blog/180625/H0jej0L3cF.png?imageslim" alt="mark">  </p><p>每年年金对应的PV计算如下：  </p><p><img src="http://pah1qyen2.bkt.clouddn.com/blog/180625/e9Ih6LEaKc.png?imageslim" alt="mark">  </p><p>把每年的PV相加，利用等比数列的求和公式，就可以得到总的PV  </p><p><img src="http://pah1qyen2.bkt.clouddn.com/blog/180625/GH3ikaKKAC.png?imageslim" alt="mark">  </p><p>用Excel来计算如下：<br><img src="http://pah1qyen2.bkt.clouddn.com/blog/180625/emBhmj9cmD.png?imageslim" alt="mark"></p><h2 id="另外一种思路"><a href="#另外一种思路" class="headerlink" title="另外一种思路"></a>另外一种思路</h2><p>这个公式看起来也很复杂，有没有别的思路来看待这个问题呢？   </p><p>如果我们先不考虑年金，只计算单笔资金的情况：  </p><p>n年后，单笔资金的FV为 <code>PV(1+i)^n</code><br>n年后，资金购买力下降（可以理解成通货膨胀），单笔资金因为通货膨胀所造成的贬值因子为：<code>(1+g&gt;^n</code><br>n年后，资金的实际购买力为：<code>PV(1+i)^n/(1+g)^n</code><br>这个公式看起来很眼熟，把他和正常的<code>FV=PV(1+i)^n</code>相比，就相当于是实际的利率为：  </p><p><img src="http://pah1qyen2.bkt.clouddn.com/blog/180625/J61j01di3f.png?imageslim" alt="mark"></p><blockquote><p>题外话：如果你的资产增长率低于通货膨胀率的话，那你的资产增长的实际利率就变成负值，被割韭菜是不可避免了。</p></blockquote><h2 id="使用PV函数计算"><a href="#使用PV函数计算" class="headerlink" title="使用PV函数计算"></a>使用PV函数计算</h2><p>有了实际利率，我们就可以使用Excel自带的PV函数来计算现值了。在计算的时候，还有一点要注意：我们在案例中的PMT是从第一期开始计算的，需要把它修正为第0期。  </p><p>怎么修正呢？直接用第一期的PMT除1+g即可。  </p><p>我们把上面的参数带入到Excel中，就可以直接用PV计算出结果。  </p><p><img src="http://pah1qyen2.bkt.clouddn.com/blog/180625/LHi2Jj197m.png?imageslim" alt="mark"></p><h2 id="计算终值"><a href="#计算终值" class="headerlink" title="计算终值"></a>计算终值</h2><p>我们有了上面的现值公式，又知道了现值和终值的关系，所以，直接把现值乘上(1+i)^n即可。<br>于是，终值的公式就成为：  </p><p><img src="http://pah1qyen2.bkt.clouddn.com/blog/180625/CIeEEdjg62.png?imageslim" alt="mark">  </p><p>这里要注意的是，不能使用上述计算PV的参数来计算FV。最好的方法，还是把上面的PV计算出来之后，再乘<code>(1+i)^n</code><br><img src="http://pah1qyen2.bkt.clouddn.com/blog/180625/A7EAK0ea5h.png?imageslim" alt="mark">  </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>递增年金的概念，以及计算其现值和终值的方法</li></ul>]]></content>
      
      <categories>
          
          <category> 金融 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Excel </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>货币的时间价值</title>
      <link href="/2018/06/24/time-value-of-money/"/>
      <url>/2018/06/24/time-value-of-money/</url>
      <content type="html"><![CDATA[<p>​    </p><a id="more"></a><p>我们在不少地方应该都听说过，时间是投资的朋友。金融学里一个很重要的思想，就是钱生钱。<br>简单的说，今天的100块，和一年后的100块，从价值上来说是不一样的。因为，今天我可以用100块去投资，哪怕是投风险最低，收益最低的国债，明年怎么也能拿到103块左右。  </p><p>从这个例子来说，现在这个时间点，这100块钱就值100块，这个称作现值。一年后，变成了103块，这103块就是一年以后的终值。  </p><blockquote><p>现值：PV Present Value<br>终值：FV Future Value  </p></blockquote><h2 id="现值和终值的关系"><a href="#现值和终值的关系" class="headerlink" title="现值和终值的关系"></a>现值和终值的关系</h2><p>对于一笔数额为m的投资，如果采用复利的方式，每年利率为i，如何计算n年以后的终值呢？  </p><ul><li>第一年的FV为：<code>m(1+i)</code>  </li><li>第二年的FV为：<code>m(1+i)(1+i)=m(1+i)^2</code></li><li>…</li><li>第n年的FV为：<code>m(1+i)^n</code>  </li></ul><p>也就是说，<code>FV=PV(1+i)^n</code>。这样我们就得到了一个现值PV和终值FV的计算公式，就可以利用现值PV，计算终值FV，或者用终值FV来计算现值PV。  </p><h2 id="用Excel计算现值和终值"><a href="#用Excel计算现值和终值" class="headerlink" title="用Excel计算现值和终值"></a>用Excel计算现值和终值</h2><p>Excel作为金融学的好基友，提供了计算现值PV和终值FV的函数。<br>内置的终值函数FV截图如下，有5个参数：  </p><p><img src="http://pah1qyen2.bkt.clouddn.com/blog/180624/DhI8l8da84.png?imageslim" alt="mark">  </p><ul><li>Rate表示每一期的利率</li><li>Nper表示一共的期数</li><li>Pmt表示每期存入或支出的资金数量，在单个资金的计算里，设置为0  </li><li>Pv表示资金的现值</li><li>Type与Pmt相关，在这里设置为默认为0  </li></ul><p>举个例子：<br>现在每个月工资10000元，假设工资每年增长7%，那么20年以后，你的工资会是多少钱？  </p><p>如下图，我们直接用<code>v(0.07,20,0,-10000,0)</code>计算即可。<br>注意，上面公式的PV我们设置为-10000,因为Excel自动把PV或者FV默认为现金流出。关于正负号的问题，可以参考Quora上的<a href="https://www.quora.com/Why-does-Excel-show-the-future-value-as-a-negative-of-the-present-value" target="_blank" rel="noopener">这篇文章</a><br><img src="http://pah1qyen2.bkt.clouddn.com/blog/180624/AFHgKgbF68.png?imageslim" alt="mark">  </p><p>同样道理，Excel也提供了一个现值函数PV，用来求给定终值FV对应的现值。<br>我们看，PV函数的参数和FV函数基本差不多，用法也差不多。  </p><p><img src="http://pah1qyen2.bkt.clouddn.com/blog/180624/GkhcJFd9c8.png?imageslim" alt="mark">  </p><p>再举个例子：  </p><p>你准备一次性拿出一部分钱投资，如果投资利率为7%，你想要在30年后拿到100万，那么现在应该投资多少钱？ </p><p>同样道理，我们用<code>pv(0.07,30, 0,-1000000,0)</code>即可。</p><p><img src="http://pah1qyen2.bkt.clouddn.com/blog/180624/3fjeJDbfic.png?imageslim" alt="mark"></p><h2 id="年金的现值和终值"><a href="#年金的现值和终值" class="headerlink" title="年金的现值和终值"></a>年金的现值和终值</h2><p>上面我们接触的情况，都是单笔投资，对于一定年限的现值或者终值。<br>在现实生活中，我们也经常会遇到定期投资一定数额（存款定投）或者是定期支出一定数额（房贷车贷）这种情况。这种一定时间内一定期数的款项，被称作年金。  </p><blockquote><p>年金：Annuitites  </p></blockquote><p>下面这个图表示了一个最简单的年金示意图：每年存入100块，连续存5年。  </p><p><img src="http://pah1qyen2.bkt.clouddn.com/blog/180624/fFI3Lacbd4.png?imageslim" alt="mark"></p><p>上面这个年金对应的现值应该怎么计算呢？我们需要按照每一期来计算。  </p><ul><li>第一期对应的PV为<code>100/(1+i)</code></li><li>第二期对应的PV为<code>100/(1+i)^2</code></li><li>…</li><li>第五期对应的PV为<code>100/(1+i)^5</code></li></ul><p>总的现值等于上面5个PV的加和。<br>上面的步骤可以抽象成这个公式：  </p><p><img src="http://pah1qyen2.bkt.clouddn.com/blog/180624/DG933igB8c.png?imageslim" alt="mark">  </p><p>如果每次的<code>pmti</code>相同的话，我们可以使用等比数列求和公式来得到年金的现值：  </p><p><img src="http://pah1qyen2.bkt.clouddn.com/blog/180624/fdCkC53I83.png?imageslim" alt="mark">   </p><p>我们上面说过，现值和终值的关系是这样的：  </p><p><img src="http://pah1qyen2.bkt.clouddn.com/blog/180624/dlG91LmaKH.png?imageslim" alt="mark"></p><p>再结合上面年金现值的公式，因此年金终值的公式就成为：  </p><p><img src="http://pah1qyen2.bkt.clouddn.com/blog/180624/chbG0bF6l9.png?imageslim" alt="mark"></p><p>看下面这个例子：  </p><p>现在你准备给孩子在银行买一笔理财金，从明年开始，每年提取出10000块用于孩子的学费，一共6年。银行的理财收益率为5%的情况下，应该买多少？  </p><p>我们用上面现值的公式，很容易就可以得到:<br><img src="http://pah1qyen2.bkt.clouddn.com/blog/180624/K439kAh635.png?imageslim" alt="mark">  </p><p>再看一个例子：  </p><p>工作后，你准备每年存10000块到理财产品，年化收益率为5%，那么30年后，你会有多少钱？<br>利用年金的终值公式，我们可以计算出来。</p><p><img src="http://pah1qyen2.bkt.clouddn.com/blog/180624/KK1mi9mlc6.png?imageslim" alt="mark"></p><p>上面两种计算方法公式看起来很麻烦，万一记不住怎么办？  </p><p>其实我们在前面计算FV和PV时，提到过有一个PMT参数。我们在前面所讲的年金，实际上就是PMT参数。  </p><p>因此，如果要计算上面含有年金的PV，可以直接使用这个公式：  </p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PV(<span class="number">0.05</span>,<span class="number">6</span>,<span class="number">-10000</span>)=<span class="number">50757</span></span><br></pre></td></tr></table></figure><p>类似的，可以用FV结合PMT参数直接求年金的终值。  </p><h2 id="现值终值全家桶函数"><a href="#现值终值全家桶函数" class="headerlink" title="现值终值全家桶函数"></a>现值终值全家桶函数</h2><p>不知道大家发现没有，我们上面反复在求FV和PV，其实最终涉及到这么几个参数：  </p><ul><li>PV</li><li>FV</li><li>Rate</li><li>NPer</li><li>PMT  </li></ul><p>其实，这5个参数，知道其中任意4个，求剩下的一个，Excel都有相对应的函数。  </p><p>最常用的应该是PMT和Rate函数。  </p><p>在<a href="https://doublure.github.io/2018/06/23/excel-loan-repayment-basic/#more">这篇文章</a>中，我们计算了等额本息方法下的还款额。<br>实际上我们想一下，要求解的还款额其实就相当于是年金。现值为1500000，终值为0（想象成银行在你这存款）<br>所以，我们不需要用复杂的公式，直接用：<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PMT(<span class="number">0.049</span>/<span class="number">12</span>, <span class="number">360</span>, <span class="number">-1500000</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure></p><p>即可求出每个月要还款7960元。  </p><p>Rate函数，用来求给定了现值，终值，年金，和期数后，所要求的利率。<br>一个更常用的用法应该是求复合增长率。例如，如果你的公司要求业绩5年翻番，那么平均每年需要增长多少？<br>对于上面这个问题，我们直接用：  </p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=<span class="built_in">RATE</span>(<span class="number">5</span>,<span class="number">0</span>,-<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>可以得到，每年的增长率为14.87%  </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>现值和终值是财务分析里最最基础的概念，如果能深刻理解钱生钱这个理念的话，本篇文章的所有内容也就都不难理解了。  </p>]]></content>
      
      <categories>
          
          <category> 金融 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Excel </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用Excel计算还款之理论基础</title>
      <link href="/2018/06/23/excel-loan-repayment-basic/"/>
      <url>/2018/06/23/excel-loan-repayment-basic/</url>
      <content type="html"><![CDATA[<p>​    </p><a id="more"></a><p>新开一部分专题，来讲讲Excel在金融建模中的应用。  </p><p>计划在这个专题里，跟随经典的教材，讲一些日常生活中我们常见的可以和财务以及Excel结合的例子。一方面，可以提高自己的金融知识水平，另一方面，也可以顺手解决一些实际需求。  </p><p>今天先从还款，也就是<code>loan repayment</code>讲起。  </p><p>话说小明毕业后来到魔都，经过5年奋斗，终于省吃俭用的攒下了10万块钱。加上家里父母支持的90万，凑够了100万首付。他看中的房子标价250万，他还需要贷款150万。  </p><p>问题来了，如果小明商业贷款的利率是每年4.9%，计划30年还清，那他每个月需要还多少月供？  </p><p>在开始计算之前，我们需要弄清楚偿还贷款的两种方式：等额本金和等额本息法。  </p><blockquote><p>等额本金：Even Principal Payments<br>等额本息： Even Total Payments  </p></blockquote><h2 id="等额本金"><a href="#等额本金" class="headerlink" title="等额本金"></a>等额本金</h2><p>等额本金的概念是：每个月的还款包括两部分：本金部分和利息部分。<br>每次还款中的本金部分的数额都是相同的，而利息部分则等于<br>剩余未偿还的本金所产生的利息。<br>以上面的例子为例：  </p><ul><li>贷款总额150万，360个月偿还，每个月需要还<code>1500000/360=4167</code>元本金</li><li>第一个月本金基数为150万，所产生的利息为：<code>1500000*0.049/12=6125</code></li><li>所以第一个月的偿还总额为：<code>4167+6125=10292</code>  </li></ul><p>到了第2个月</p><ul><li>需要偿还的本金依旧是<code>4167</code>元</li><li>因为上一个月已经还了<code>4167</code>元本金，因此剩余的本金产生的利息为：<code>(1500000-4167)*0.049/12=6108</code></li><li>所以第二个月的还款总额是：<code>4167+6108=10275</code>  </li></ul><p>以此类推，一直到最后一个月。  </p><p>算一算我们就看出来了，等额本金法每个月的还款额是逐渐减少的。<br>每个月减少的数额实际上就是上个月偿还的本金额一个月所产生的利息。用上面的例子来计算，就是<code>4167*0.049/12=17</code>。  </p><p>用Excel模拟计算出来的结果如下：<br><img src="http://pah1qyen2.bkt.clouddn.com/blog/180623/dkK69Ajbj0.png?imageslim" alt="mark"></p><h2 id="等额本息"><a href="#等额本息" class="headerlink" title="等额本息"></a>等额本息</h2><p>等额本息的概念是：每期还款的数额是不变的。每期还款后，剩下的本金加上当期产生的利息作为一个整体继续计息。  </p><blockquote><p>这种方式就是利滚利  </p></blockquote><p>假设每期的利率为r<br>贷款金额为p</p><ul><li>第一期还款x元，剩余欠款为<code>p(1+r)-x</code></li><li>第二期还款x元，剩余欠款为<code>(p(1+r)-x)*(1+r)-x = p(1+r)^2 -x(1+r) -x</code></li><li>第三期还款x元，剩余欠款为<code>p(1+r)^3- x(1+r)^2- x(1+r) -x</code></li><li>第n期还款x元，剩余欠款为 <code>p(1+r)^n - x(1+r)^(n-1) -x(1+r)^(n-2) - ... - x(1+r) -x</code></li></ul><p>到了第n期，剩余欠款就为0了，因此 p(1+r)^n - x(1+r)^(n-1) -x(1+r)^(n-2) - … - x(1+r) -x = 0<br>利用上面这个公式，以及等比公式求和公式，我们可以推导出：  </p><p><img src="http://pah1qyen2.bkt.clouddn.com/blog/180623/EgJ0K132CG.png?imageslim" alt="mark">  </p><p>回到我们题目中的例子，如果采用等额本息的方法，每个月的还款额为：<code>1500000*0.049/12*(1+0.049/12)^360/((1+0.049/12)^360-1)=7691</code>    </p><p>用Excel模拟出来的结果如下：   </p><p><img src="http://pah1qyen2.bkt.clouddn.com/blog/180623/FKf16HDEg4.png?imageslim" alt="mark"></p><h2 id="两种方法的比较"><a href="#两种方法的比较" class="headerlink" title="两种方法的比较"></a>两种方法的比较</h2><ul><li>从实际还款总额来看的话，等额本金法比等额本息法要少。我们上面这个例子，等额本金最终所有还款额为260万，而等额本息的还款总额为286万  </li><li>从每期还款数目来看的话，等额本金法最初的单期还款数额比等额本息要高很多，初期的资金压力会比较大，但其还款金额会随着时间递减</li></ul><p>上面公式看起来都蛮复杂的，那么怎么样用Excel来计算呢？这个我们在下一节继续研究。  </p>]]></content>
      
      <categories>
          
          <category> 金融 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Excel </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>同样的Access，不一样的数据类型</title>
      <link href="/2018/06/21/Access-version-data-type/"/>
      <url>/2018/06/21/Access-version-data-type/</url>
      <content type="html"><![CDATA[<p>​    </p><a id="more"></a><p>最近算是和<code>ACCESS</code>彻底杠上了。  </p><p>其实我一般是不太喜欢用<code>ACCESS</code>的，因为自己不是专门做数据库的，用<code>ACCESS</code>总有一种杀鸡用牛刀的感觉。  </p><p>不过最近做一个项目，指定要用<code>ACCESS</code>。于是在自己的私人电脑上做了一个小的demo文件。<br>然而，这个文件拷贝到公司电脑上，打开时却报错了：  </p><p><img src="http://pah1qyen2.bkt.clouddn.com/blog/180621/FJc7mJGKb0.png?imageslim" alt="mark"></p><p>看这个报错，貌似是因为公司电脑的<code>ACCESS</code>版本不够高？查看了一下公司电脑的版本，已经是2016版了。难道还有比2016版还要高的版本？ </p><p><img src="http://pah1qyen2.bkt.clouddn.com/blog/180621/jhfjdHjCCk.png?imageslim" alt="mark">  </p><p>还是老套路，到<code>MSDN</code>上面搜一个报错关键词，查到<a href="https://support.microsoft.com/en-gb/help/3208802/database-you-are-trying-to-open-requires-a-newer-version-of-microsoft" target="_blank" rel="noopener">这个页面</a>，里面提到：  </p><blockquote><p>This issue occurs if you try to open a database that contains a table that uses the BigInt data type. BigInt support was added to Access 2016. BigInt appears within the table’s data type as Large Number.</p></blockquote><p>也就是说，<code>ACCESS</code>2016版里新增了一个数据类型叫<code>BigInt</code>。如果用以前的<code>ACCESS</code>版本来打开含有<code>BigInt</code>类型的文件，就会报错。   </p><p>那么问题来了，我的公司电脑已经是2016版的，里面有没有<code>Large Number</code>这个数据类型呢？看了一下，居然没有！为什么呢？</p><p><img src="http://pah1qyen2.bkt.clouddn.com/blog/180621/3hAfah8gC6.png?imageslim" alt="mark">  </p><p>还有一点：<code>MSDN</code>里说，如果要打开的表格里使用了<code>BigInt</code>这个类型才会报错，可是我的原始文件里也没有用到这个数据类型，为什么也会报错呢？  </p><p>这两个问题始终没有得到答案。最后的处理方式是：把私人电脑里的<code>ACCESS</code>数据导出为Excel文件，然后导入到公司电脑上。这也算是一种曲线救国的方式了。  </p>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Access </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用ADO导入CSV后部分数据变成NULL，怎么破？</title>
      <link href="/2018/06/20/ADO-Text-Driver-Data-Type/"/>
      <url>/2018/06/20/ADO-Text-Driver-Data-Type/</url>
      <content type="html"><![CDATA[<p>​    </p><a id="more"></a><p>最近要处理一些数据量比较大的CSV文件，本着能不用<code>ACCESS</code>就不用<code>ACCESS</code>的原则，使用了<code>VBA</code>+<code>ADO</code>联用的方法。  </p><blockquote><p>CSV，Comma Separated Value，是一种用逗号分隔不同的值，来保存数据的文本文件  </p></blockquote><blockquote><p>ADO, Active Data Object，可以简单的看作是操作数据库的接口 </p></blockquote><h2 id="出现了什么问题？"><a href="#出现了什么问题？" class="headerlink" title="出现了什么问题？"></a>出现了什么问题？</h2><p>首先要做的一步是把<code>CSV</code>中的数据读取到工作表里。鉴于这不是一篇入门的文章，我们就不在这里介绍基础内容了。  </p><p>现有的<code>p.csv</code>文件是这个样子：    </p><p><img src="http://pah1qyen2.bkt.clouddn.com/blog/180620/FJJ1bKaeH4.png?imageslim" alt="mark"></p><p>用下面的这段程序，可以直接把<code>CSV</code>中的数据读入到工作表里。  </p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Option</span> <span class="keyword">Explicit</span></span><br><span class="line"><span class="keyword">Sub</span> main()</span><br><span class="line">    LoadData <span class="string">"p.csv"</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Private</span> <span class="keyword">Sub</span> LoadData(strCSVPath <span class="keyword">As</span> <span class="built_in">String</span>)</span><br><span class="line">    <span class="keyword">Dim</span> strSQL <span class="keyword">As</span> <span class="built_in">String</span>, strConnection <span class="keyword">As</span> <span class="built_in">String</span></span><br><span class="line">    <span class="keyword">Dim</span> oRst <span class="keyword">As</span> ADODB.Recordset</span><br><span class="line">    </span><br><span class="line">    strConnection = <span class="string">"Provider=Microsoft.ace.oledb.12.0;"</span> &amp; _</span><br><span class="line">                    <span class="string">"Data Source="</span> &amp; ThisWorkbook.Path &amp; <span class="string">";"</span> &amp; _</span><br><span class="line">                    <span class="string">"Extended Properties= 'text;HDR=Yes;IMEX=1;FMT=Delimited(,)';"</span></span><br><span class="line">    <span class="keyword">Set</span> oRst = <span class="keyword">New</span> ADODB.Recordset</span><br><span class="line">    strSQL = <span class="string">"SELECT * FROM "</span> &amp; strCSVPath</span><br><span class="line">    oRst.Open strSQL, strConnection, adOpenStatic, adLockReadOnly</span><br><span class="line">    Sheet1.Range(<span class="string">"a1"</span>).CopyFromRecordset oRst</span><br><span class="line">    oRst.Close</span><br><span class="line">    <span class="keyword">Set</span> oRst = <span class="literal">Nothing</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><p>上面这段代码，可以把当前工作簿目录下的<code>p.csv</code>中的数据内容导入到sheet1工作表里。<br>查看sheet1工作表，发现一个问题：有些单元格是空的，比如第189，195,196行。  </p><p><img src="http://pah1qyen2.bkt.clouddn.com/blog/180620/cfh4lme6fK.png?imageslim" alt="mark"></p><p>再返回到源文件查看对应的行，第一眼看上去是有数据的啊，见下图：</p><p><img src="http://pah1qyen2.bkt.clouddn.com/blog/180620/9cklHmjD3a.png?imageslim" alt="mark">  </p><p>又重复运行了几次脚本，复制出来的数据始终有空行，百思不得其解。  </p><h2 id="原因在哪里？"><a href="#原因在哪里？" class="headerlink" title="原因在哪里？"></a>原因在哪里？</h2><p>又盯着看了一会，似乎看出了点端倪。不能被显示出来的数据貌似都很大，都是<code>E9</code>数量级。但看第188行，<code>1.22E9</code>是可以正常显示的。  </p><p>感觉显示为空单元的数字都太大了，所以没有显示出来。经过LEAF大神的提醒，可以使用<code>Fields.Type</code>来查看数据类型。上面的代码修改为：</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Option</span> <span class="keyword">Explicit</span></span><br><span class="line"><span class="keyword">Sub</span> main()</span><br><span class="line">    LoadData <span class="string">"p.csv"</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Private</span> <span class="keyword">Sub</span> LoadData(strCSVPath <span class="keyword">As</span> <span class="built_in">String</span>)</span><br><span class="line">    <span class="keyword">Dim</span> strSQL <span class="keyword">As</span> <span class="built_in">String</span>, strConnection <span class="keyword">As</span> <span class="built_in">String</span></span><br><span class="line">    <span class="keyword">Dim</span> oRst <span class="keyword">As</span> ADODB.Recordset</span><br><span class="line">    <span class="keyword">Dim</span> i <span class="keyword">As</span> <span class="built_in">Integer</span></span><br><span class="line">    strConnection = <span class="string">"Provider=Microsoft.ace.oledb.12.0;"</span> &amp; _</span><br><span class="line">                    <span class="string">"Data Source="</span> &amp; ThisWorkbook.Path &amp; <span class="string">";"</span> &amp; _</span><br><span class="line">                    <span class="string">"Extended Properties= 'text;HDR=Yes;IMEX=1;FMT=Delimited(,)';"</span></span><br><span class="line">    <span class="keyword">Set</span> oRst = <span class="keyword">New</span> ADODB.Recordset</span><br><span class="line">    strSQL = <span class="string">"SELECT * FROM "</span> &amp; strCSVPath</span><br><span class="line">    oRst.Open strSQL, strConnection, adOpenStatic, adLockReadOnly</span><br><span class="line">    <span class="comment">'以下为新增代码</span></span><br><span class="line">    <span class="comment">'========</span></span><br><span class="line">    <span class="keyword">For</span> i = <span class="number">0</span> <span class="keyword">To</span> oRst.Fields.Count - <span class="number">1</span></span><br><span class="line">        Debug.Print oRst.Fields(i).Type, oRst.Fields(i).Name</span><br><span class="line">    <span class="keyword">Next</span> i</span><br><span class="line">    <span class="comment">'========</span></span><br><span class="line">    <span class="comment">'以上为新增代码</span></span><br><span class="line">    Sheet1.Range(<span class="string">"a1"</span>).CopyFromRecordset oRst</span><br><span class="line">    oRst.Close</span><br><span class="line">    <span class="keyword">Set</span> oRst = <span class="literal">Nothing</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><p>到立即窗口查看，打印出了下面的内容：<br><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">202 </span>      账户简称</span><br><span class="line"><span class="symbol">3 </span>        金额（元）</span><br><span class="line"><span class="symbol">7 </span>        结算日期</span><br></pre></td></tr></table></figure></p><p>也就是说，金额字段对应的数据类型是3。数据类型3又是什么呢？直接在msdn上搜索一下，发现<a href="https://docs.microsoft.com/en-us/sql/ado/reference/ado-api/datatypeenum?view=sql-server-2017" target="_blank" rel="noopener">这个页面</a>里说的很清楚：  </p><p><img src="http://pah1qyen2.bkt.clouddn.com/blog/180620/i22f12jchA.png?imageslim" alt="mark">  </p><p>3对应的是4个字节的正负整数。4个字节大约可以表示从<code>-2^31</code>到<code>2^31</code>之间，大约是<code>-2.15E9</code>到<code>2.15E9</code>。难怪<code>4.7E9</code>显示不出来，因为变量长度溢出了啊。  </p><h2 id="为什么会出现这个问题？"><a href="#为什么会出现这个问题？" class="headerlink" title="为什么会出现这个问题？"></a>为什么会出现这个问题？</h2><p>在用ADO读取文本文件的时候，因为文本文件中的数据格式没有被显式指定，所以ADO的文本引擎会先扫描一定的行数，然后给每列推测一个数据类型。  </p><p>很显然，文中出现的问题就是因为ADO扫描完之后，指定了一个<code>adInteger</code>类型，但后面出现的大的数字已经超出了范围。  </p><p>那么，ADO会扫描多少行呢？<br>在网上搜了一下，在这个注册表下面有ADO文本引擎的默认设置：<br><code>[Computer\HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Jet\4.0\Engines\Text]</code></p><p><img src="http://pah1qyen2.bkt.clouddn.com/blog/180620/Db41eFFBbK.png?imageslim" alt="mark">  </p><p>很明显，MaxScanRows的值是25，也就是说Text引擎会扫描25行，然后根据扫描结果指定一个数据类型。  </p><h2 id="怎么解决？"><a href="#怎么解决？" class="headerlink" title="怎么解决？"></a>怎么解决？</h2><p>有两种方法。  </p><p>第一种方法不太推荐，就是直接修改注册表，把<code>MaxScanRows</code>的值修改为足够大。如果想扫描全部内容，就把<code>MaxScanRows</code>的值改为0。  </p><p>第二种方法更加安全一些，也就是用一个文件<code>Schema.ini</code>来存储文本文件的信息。  </p><p><code>Schema.ini</code>一定要与<code>CSV</code>文件在同一个目录下，他包含了下面这些信息：  </p><ul><li>文件名  </li><li>文件格式  </li><li>字段名</li><li>字符集</li><li>等等  </li></ul><p>详细的格式设置可以查看<a href="https://docs.microsoft.com/en-us/sql/odbc/microsoft/schema-ini-file-text-file-driver?view=sql-server-2017" target="_blank" rel="noopener">这个链接</a>  </p><p>在这个例子里，我们就在<code>p.csv</code>所在的文件夹创建<code>Schema.ini</code>，然后简单的指定下面的内容即可。  </p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[p.csv]</span></span><br><span class="line"><span class="attr">Format</span> = CSVDelimited</span><br><span class="line"><span class="attr">ColNameHeader</span> = <span class="literal">True</span></span><br><span class="line"><span class="attr">MaxScanRows</span> = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>当然，我们也可以把创建文件的内容加入到<code>ADO</code>脚本里，最后完整的脚本内容就会变成：  </p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Option</span> <span class="keyword">Explicit</span></span><br><span class="line"><span class="keyword">Sub</span> main()</span><br><span class="line">    CreateIniFile <span class="string">"p.csv"</span></span><br><span class="line">    LoadData <span class="string">"p.csv"</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Private</span> <span class="keyword">Sub</span> LoadData(strCSVPath <span class="keyword">As</span> <span class="built_in">String</span>)</span><br><span class="line">    <span class="keyword">Dim</span> strSQL <span class="keyword">As</span> <span class="built_in">String</span>, strConnection <span class="keyword">As</span> <span class="built_in">String</span></span><br><span class="line">    <span class="keyword">Dim</span> oRst <span class="keyword">As</span> ADODB.Recordset</span><br><span class="line">    <span class="keyword">Dim</span> i <span class="keyword">As</span> <span class="built_in">Integer</span></span><br><span class="line">    strConnection = <span class="string">"Provider=Microsoft.ace.oledb.12.0;"</span> &amp; _</span><br><span class="line">                    <span class="string">"Data Source="</span> &amp; ThisWorkbook.Path &amp; <span class="string">";"</span> &amp; _</span><br><span class="line">                    <span class="string">"Extended Properties= 'text;HDR=Yes;IMEX=1;FMT=Delimited(,)';"</span></span><br><span class="line">    <span class="keyword">Set</span> oRst = <span class="keyword">New</span> ADODB.Recordset</span><br><span class="line">    strSQL = <span class="string">"SELECT * FROM "</span> &amp; strCSVPath</span><br><span class="line">    oRst.Open strSQL, strConnection, adOpenStatic, adLockReadOnly</span><br><span class="line">    Sheet1.Range(<span class="string">"a1"</span>).CopyFromRecordset oRst</span><br><span class="line">    oRst.Close</span><br><span class="line">    <span class="keyword">Set</span> oRst = <span class="literal">Nothing</span></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Private</span> <span class="keyword">Sub</span> CreateIniFile(strCSVPath <span class="keyword">As</span> <span class="built_in">String</span>)</span><br><span class="line">    <span class="keyword">Dim</span> iFreeFile <span class="keyword">As</span> <span class="built_in">Integer</span></span><br><span class="line">    <span class="keyword">Dim</span> StrIni <span class="keyword">As</span> <span class="built_in">String</span></span><br><span class="line">    </span><br><span class="line">    StrIni = <span class="string">"["</span> &amp; strCSVPath &amp; <span class="string">"]"</span> &amp; vbCrLf &amp; _</span><br><span class="line">                    <span class="string">"Format = CSVDelimited"</span> &amp; vbCrLf &amp; _</span><br><span class="line">                    <span class="string">"ColNameHeader = True"</span> &amp; vbCrLf &amp; _</span><br><span class="line">                    <span class="string">"MaxScanRows = 0"</span></span><br><span class="line">    </span><br><span class="line">    iFreeFile = FreeFile</span><br><span class="line">    </span><br><span class="line">    Open ThisWorkbook.Path &amp; <span class="string">"\Schema.ini"</span> <span class="keyword">For</span> Output <span class="keyword">As</span> <span class="meta">#iFreeFile</span></span><br><span class="line">    Print <span class="meta">#iFreeFile, StrIni</span></span><br><span class="line">    Close <span class="meta">#iFreeFile</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">End</span> <span class="keyword">Sub</span></span><br></pre></td></tr></table></figure><p>再次运行程序，发现之前的空白单元格已经有数字进来了：  </p><p><img src="http://pah1qyen2.bkt.clouddn.com/blog/180620/L39DBI9i4c.png?imageslim" alt="mark">  </p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><code>VBA</code>还是要多查<code>MSDN</code>  </li><li><code>ADO</code>里的<code>Field</code>的基本属性要熟练</li></ul>]]></content>
      
      <categories>
          
          <category> VBA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ADO </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用scrapy爬取职位信息</title>
      <link href="/2018/06/15/%E7%94%A8scrapy%E7%88%AC%E5%8F%96%E8%81%8C%E4%BD%8D%E4%BF%A1%E6%81%AF/"/>
      <url>/2018/06/15/%E7%94%A8scrapy%E7%88%AC%E5%8F%96%E8%81%8C%E4%BD%8D%E4%BF%A1%E6%81%AF/</url>
      <content type="html"><![CDATA[<p>​    </p><a id="more"></a><p>新开一篇，来讲解一个<code>51JOB</code>工作职位的爬取。<br>目标：<br>爬取<code>51JOB</code>上所有与化工相关的职位信息。  </p><p>工具：<br><code>scrapy</code>框架+<code>Python3</code>  </p><h2 id="第一步：安装环境"><a href="#第一步：安装环境" class="headerlink" title="第一步：安装环境"></a>第一步：安装环境</h2><p>使用：  </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv -<span class="selector-tag">p</span> /usr/bin/python3 scrapy_env</span><br></pre></td></tr></table></figure><p>来创建一个新的虚拟环境来运行<code>scrapy</code>  </p><p>cd到<code>scrapy_env</code>文件夹，然后执行下面语句来开启虚拟空间：  </p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/scrapy_env$ source bin/<span class="built_in">activate</span></span><br></pre></td></tr></table></figure><p>进入到<code>scrapy_env</code>的虚拟空间后，用<code>pip3 install scrapy</code>来安装<code>scrapy</code>所需要的依赖  </p><h2 id="创建Scrapy项目"><a href="#创建Scrapy项目" class="headerlink" title="创建Scrapy项目"></a>创建<code>Scrapy</code>项目</h2><p>使用<code>scrapy startproject</code>来创建项目。   </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ scrapy startproject 51job</span><br><span class="line">Error: Project names must <span class="keyword">begin</span> <span class="keyword">with</span> a letter <span class="keyword">and</span> contain <span class="keyword">only</span></span><br><span class="line">letters, numbers <span class="keyword">and</span> underscores</span><br><span class="line">~$ scrapy startproject jobs</span><br><span class="line"><span class="keyword">New</span> Scrapy <span class="keyword">project</span> <span class="string">'jobs'</span>, <span class="keyword">using</span> <span class="keyword">template</span> <span class="keyword">directory</span> <span class="string">'/home/ubuntu/scrapy_env/lib/python3.5/site-packages/scrapy/templates/project'</span>, created <span class="keyword">in</span>:</span><br><span class="line">    /home/ubuntu/jobs</span><br><span class="line"></span><br><span class="line">You can <span class="keyword">start</span> your <span class="keyword">first</span> spider <span class="keyword">with</span>:</span><br><span class="line">    cd jobs</span><br><span class="line">    scrapy genspider example example.com</span><br></pre></td></tr></table></figure><p>然后使用<code>scrapy genspider</code>来创建一个爬虫  </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~/jobs$ scrapy genspider JobSpider search.<span class="number">51</span>job.com</span><br><span class="line">Created spider <span class="string">'JobSpider'</span> using template <span class="string">'basic'</span> <span class="keyword">in</span> module:</span><br><span class="line">  jobs<span class="selector-class">.spiders</span><span class="selector-class">.JobSpider</span></span><br></pre></td></tr></table></figure><p>这样，项目的框架就搭好了。现在整个项目的目录文件应该是这样子的：  </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── jobs</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── items.py</span><br><span class="line">│   ├── middlewares.py</span><br><span class="line">│   ├── pipelines.py</span><br><span class="line">│   ├── __pycache__</span><br><span class="line">│   │   ├── __init__<span class="selector-class">.cpython-35</span><span class="selector-class">.pyc</span></span><br><span class="line">│   │   └── settings<span class="selector-class">.cpython-35</span><span class="selector-class">.pyc</span></span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   └── spiders</span><br><span class="line">│       ├── __init__.py</span><br><span class="line">│       ├── JobSpider.py</span><br><span class="line">│       └── __pycache__</span><br><span class="line">└── scrapy.cfg</span><br></pre></td></tr></table></figure><h2 id="编辑Scrapy文件"><a href="#编辑Scrapy文件" class="headerlink" title="编辑Scrapy文件"></a>编辑<code>Scrapy</code>文件</h2><p><code>Scrapy</code>框架极大程度的减少了我们爬虫额代码编写量。对于一个简单的爬虫，我们只需要修改下面几个内容。 </p><p>首次得打开网页链接：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http<span class="variable">s:</span>//<span class="built_in">search</span>.<span class="number">51</span>job.<span class="keyword">com</span>/<span class="keyword">list</span>/<span class="number">000000</span>,<span class="number">000000</span>,<span class="number">0000</span>,<span class="number">19</span>,<span class="number">9</span>,<span class="number">99</span>,%<span class="number">2</span>B,<span class="number">2</span>,<span class="number">1</span>.html?lang=<span class="keyword">c</span>&amp;stype=<span class="number">1</span>&amp;postchannel=<span class="number">0000</span>&amp;workyear=<span class="number">99</span>&amp;cotype=<span class="number">99</span>&amp;degreefrom=<span class="number">99</span>&amp;jobterm=<span class="number">99</span>&amp;companysize=<span class="number">99</span>&amp;lonlat=<span class="number">0</span>%<span class="number">2</span>C0&amp;radius=-<span class="number">1</span>&amp;ord_field=<span class="number">0</span>&amp;confirmdate=<span class="number">9</span>&amp;fromType=<span class="number">1</span>&amp;dibiaoid=<span class="number">0</span>&amp;address=&amp;<span class="built_in">line</span>=&amp;specialarea=<span class="number">00</span>&amp;from=&amp;welfare=</span><br></pre></td></tr></table></figure></p><h3 id="items-py"><a href="#items-py" class="headerlink" title="items.py"></a><code>items.py</code></h3><p>我们需要获取的每一条招聘内容包括了下面这些信息：  </p><ul><li>职位名</li><li>公司名</li><li>工作地点</li><li>薪资</li><li>发布时间<br>因此，我们需要根据这些来定义一个<code>Item</code>，也就是一条爬取下来的信息。  </li></ul><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import <span class="keyword">scrapy</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">class </span><span class="keyword">JobsItem(scrapy.Item):</span></span><br><span class="line"><span class="keyword"> </span>   <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line">    <span class="keyword">job_title </span>= <span class="keyword">scrapy.Field()</span></span><br><span class="line"><span class="keyword"> </span>   company = <span class="keyword">scrapy.Field()</span></span><br><span class="line"><span class="keyword"> </span>   <span class="keyword">job_href </span>= <span class="keyword">scrapy.Field()</span></span><br><span class="line"><span class="keyword"> </span>   location = <span class="keyword">scrapy.Field()</span></span><br><span class="line"><span class="keyword"> </span>   salary = <span class="keyword">scrapy.Field()</span></span><br><span class="line"><span class="keyword"> </span>   post_date = <span class="keyword">scrapy.Field()</span></span><br></pre></td></tr></table></figure><p>这就好了，讲白了，我们是定义了一个名字叫<code>JobItem</code>的字典，然后给这个字典定义了5个键。  </p><h3 id="spiders-JobSpider-py"><a href="#spiders-JobSpider-py" class="headerlink" title="spiders/JobSpider.py"></a><code>spiders/JobSpider.py</code></h3><p>确定了我们要获取的信息，我们就可以处理爬虫了。  </p><p>爬取51job其实非常简单，我们只需要输入指定的关键字，然后点搜索，把返回的网页网址作为起始网址即可。  </p><p>然后要遵循下面的这个思路：</p><ul><li>爬某个页面</li><li>把我们所需要的字段信息装载到<code>item</code>里，后面我们要通过<code>pipeline</code>来进行处理</li><li>找到<code>下一页</code>的<code>anchor</code>标签的链接地址</li><li>如果能找到<code>下一页</code>的话，就递归回到第一步</li></ul><p>在解析页面的时候，需要用到<code>scrapy</code>的<code>selector</code>对象的<code>xpath</code>方法。<code>xpath</code>相对于<code>css</code>选择器来说更加复杂一些，但解析效率更高。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"><span class="keyword">from</span> jobs.items <span class="keyword">import</span> JobsItem</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JobspiderSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name=<span class="string">'jobspider'</span></span><br><span class="line">    allowed_domains = [<span class="string">'search.51job.com'</span>]</span><br><span class="line">    start_urls = [</span><br><span class="line">        <span class="string">'http://search.51job.com/list/000000,000000,0000,19,9,99,%2B,2,1.html?lang=c&amp;stype=1&amp;postchannel=0000&amp;workyear=99&amp;cotype=99&amp;degreefrom=99&amp;jobterm=99&amp;companysize=99&amp;lonlat=0%2C0&amp;radius=-1&amp;ord_field=0&amp;confirmdate=9&amp;fromType=1&amp;dibiaoid=0&amp;address=&amp;line=&amp;specialarea=00&amp;from=&amp;welfare='</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line"></span><br><span class="line">        next_page_url = response.xpath(<span class="string">'//li[@class="bk"][2]/a/@href'</span>)</span><br><span class="line">        job_list = response.xpath(<span class="string">'//*[@id="resultList"]/div[@class="el"]'</span>)</span><br><span class="line">        <span class="keyword">for</span> each_job <span class="keyword">in</span> job_list:</span><br><span class="line">            job_info = JobsItem()</span><br><span class="line">            job_info[<span class="string">'job_title'</span>] = each_job.xpath(<span class="string">'.//p[contains(@class,"t1")]/span/a/text()'</span>)</span><br><span class="line">            job_info[<span class="string">'company'</span>] = each_job.xpath(<span class="string">'.//span[contains(@class,"t2")]/a/text()'</span>)</span><br><span class="line">            job_info[<span class="string">'job_href'</span>] = each_job.xpath(<span class="string">'.//span[contains(@class,"t2")]/a/@href'</span>)</span><br><span class="line">            job_info[<span class="string">'location'</span>] = each_job.xpath(<span class="string">'.//span[contains(@class,"t3")]/text()'</span>)</span><br><span class="line">            job_info[<span class="string">'salary'</span>] = each_job.xpath(<span class="string">'.//span[contains(@class,"t4")]/text()'</span>)</span><br><span class="line">            job_info[<span class="string">'post_date'</span>] = each_job.xpath(<span class="string">'.//span[contains(@class,"t5")]/text()'</span>) <span class="comment"># mm-dd</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> k, v <span class="keyword">in</span> job_info.items():</span><br><span class="line">                <span class="keyword">if</span> v:</span><br><span class="line">                    job_info[k] = v.extract_first().strip()</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    job_info[k] = <span class="string">'unknown'</span></span><br><span class="line">            <span class="keyword">yield</span> job_info</span><br><span class="line">        <span class="keyword">if</span> next_page_url <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            abs_url = next_page_url.extract_first().strip()</span><br><span class="line">            <span class="keyword">yield</span> response.follow(abs_url, callback=self.parse)</span><br></pre></td></tr></table></figure><h3 id="pipelines-py"><a href="#pipelines-py" class="headerlink" title="pipelines.py"></a><code>pipelines.py</code></h3><p><code>pipelines</code>用来处理<code>scrapy</code>爬取完页面然后解析出来的<code>item</code>。可以这么理解，<code>pipelines</code>把<code>item</code>处理完之后，会装入到数据库里去。<br>在这里，我们要把数据装入到<code>MYSQL</code>数据库里，并且先不考虑去重等要求。  </p><blockquote><p>这需要在<code>MySQL</code>中先建立好<code>DATABASE</code>以及<code>TABLE</code>。</p></blockquote><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">import pymysql</span><br><span class="line">import datetime</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JobsPipeline</span>(<span class="title">object</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(<span class="keyword">self</span>, spider)</span></span><span class="symbol">:</span></span><br><span class="line">        <span class="keyword">self</span>.database = pymysql.connect(host=<span class="string">'localhost'</span>,</span><br><span class="line">                                  port=<span class="number">3306</span>,</span><br><span class="line">                                  user=<span class="string">'xxxxxx'</span>,</span><br><span class="line">                                  passwd=<span class="string">'xxxxxx'</span>,</span><br><span class="line">                                  db=<span class="string">'job_info'</span>,</span><br><span class="line">                                  charset=<span class="string">'utf8'</span>)</span><br><span class="line">        <span class="keyword">self</span>.cursor = <span class="keyword">self</span>.database.cursor()</span><br><span class="line">        <span class="keyword">self</span>.table = <span class="string">'jobs'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(<span class="keyword">self</span>, item, spider)</span></span><span class="symbol">:</span></span><br><span class="line"></span><br><span class="line">        sql_string = <span class="string">'INSERT INTO &#123;&#125; (job_title, company, job_href, location, salary, post_date, update_datetime)  \</span></span><br><span class="line"><span class="string">                VALUES("&#123;&#125;","&#123;&#125;","&#123;&#125;","&#123;&#125;","&#123;&#125;","&#123;&#125;",str_to_date("&#123;&#125;","%Y-%m-%d %H:%i:%s"));'</span> \</span><br><span class="line">            .format(<span class="keyword">self</span>.table, item[<span class="string">'job_title'</span>], item[<span class="string">'company'</span>], item[<span class="string">'job_href'</span>],</span><br><span class="line">                    item[<span class="string">'location'</span>], item[<span class="string">'salary'</span>], item[<span class="string">'post_date'</span>],</span><br><span class="line">                    datetime.datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>))</span><br><span class="line">        <span class="symbol">try:</span></span><br><span class="line">            <span class="keyword">self</span>.cursor.execute(sql_string)</span><br><span class="line">            <span class="keyword">self</span>.database.commit()</span><br><span class="line">        <span class="symbol">except:</span></span><br><span class="line">            print(<span class="string">'error'</span>)</span><br><span class="line">            <span class="keyword">self</span>.database.rollback()</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure><h3 id="settings-py"><a href="#settings-py" class="headerlink" title="settings.py"></a><code>settings.py</code></h3><p>完成上面的处理之后，我们还需要做最后一步，修改<code>settings.py</code>，也就是项目设置。  </p><p>最主要的是两件事情：  </p><ul><li>设置默认的请求头<br>设置默认的请求头很简单，只需要找到，修改为下面的内容即可。  </li></ul><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DEFAULT_REQUEST_HEADERS = &#123;</span><br><span class="line">    'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',</span><br><span class="line">    'Accept-Language': 'en-US,en;q=0.9',</span><br><span class="line">    'Connection':'keep-alive',</span><br><span class="line">    'Cookie':'your-cookie-here',</span><br><span class="line">    'Host':'search.51job.com',</span><br><span class="line">    'Referer':'http://search.51job.com/list/<span class="number">000000</span>,<span class="number">000000</span>,<span class="number">0000</span>,19,9,99,%2B,2,2.html?lang=c&amp;stype=1&amp;postchannel=<span class="number">0000</span>&amp;workyear=99&amp;cotype=99&amp;degreefrom=99&amp;jobterm=99&amp;companysize=99&amp;lonlat=0%2C0&amp;radius=-1&amp;ord_field=0&amp;confirmdate=9&amp;fromType=1&amp;dibiaoid=0&amp;address=&amp;line=&amp;specialarea=00&amp;from=&amp;welfare=%27',</span><br><span class="line">    'Upgrade-Insecure-Requests':'1',</span><br><span class="line">    'User-Agent':'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/65.0.<span class="number">3325.18</span>1 Chrome/65.0.<span class="number">3325.18</span>1 Safari/537.36',</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那上面这些内容是从哪来的呢？当然是从<code>Chrome</code>浏览器的<code>Request Headers</code>的信息拿出来的。  </p><ul><li>开启<code>pipelines</code><br>这个也很简单，把下面这句取消注释即可。  <figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">   'jobs.pipelines.JobsPipeline': 300,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="最终运行"><a href="#最终运行" class="headerlink" title="最终运行"></a>最终运行</h2><p>cd到项目的根目录下，注意一定要是根目录，然后执行：  </p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">scrapy crawl jobspider</span></span><br></pre></td></tr></table></figure><p>至此，一个最简单的<code>Scrapy</code>爬虫就写好了。<br>后期还有很多细节要处理，比如数据去重，异常处理，数据分析等等，不过这些我们可以在后面优化，后面我们也会陆续讲解。</p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> Scrapy </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
